// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using wlc2.Data;

#nullable disable

namespace wlc2.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230626153959_addRolesAndUsersToDB")]
    partial class addRolesAndUsersToDB
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AcademicYearCourse", b =>
                {
                    b.Property<int>("AcademicYearsId")
                        .HasColumnType("int");

                    b.Property<int>("CoursesId")
                        .HasColumnType("int");

                    b.HasKey("AcademicYearsId", "CoursesId");

                    b.HasIndex("CoursesId");

                    b.ToTable("AcademicYearCourse");
                });

            modelBuilder.Entity("AdvisorCourse", b =>
                {
                    b.Property<int>("AdvisorsId")
                        .HasColumnType("int");

                    b.Property<int>("CoursesId")
                        .HasColumnType("int");

                    b.HasKey("AdvisorsId", "CoursesId");

                    b.HasIndex("CoursesId");

                    b.ToTable("AdvisorCourse");
                });

            modelBuilder.Entity("AdvisorInstitution", b =>
                {
                    b.Property<int>("AdvisorsId")
                        .HasColumnType("int");

                    b.Property<int>("InstitutionsId")
                        .HasColumnType("int");

                    b.HasKey("AdvisorsId", "InstitutionsId");

                    b.HasIndex("InstitutionsId");

                    b.ToTable("AdvisorInstitution");
                });

            modelBuilder.Entity("AdvisorProject", b =>
                {
                    b.Property<int>("AdvisorsId")
                        .HasColumnType("int");

                    b.Property<int>("SupervisedProjectsId")
                        .HasColumnType("int");

                    b.HasKey("AdvisorsId", "SupervisedProjectsId");

                    b.HasIndex("SupervisedProjectsId");

                    b.ToTable("AdvisorProject");
                });

            modelBuilder.Entity("AdvisorProposal", b =>
                {
                    b.Property<int>("AdvisorsId")
                        .HasColumnType("int");

                    b.Property<int>("ProposalsId")
                        .HasColumnType("int");

                    b.HasKey("AdvisorsId", "ProposalsId");

                    b.HasIndex("ProposalsId");

                    b.ToTable("AdvisorProposal");
                });

            modelBuilder.Entity("ApplicationStudent", b =>
                {
                    b.Property<int>("ApplicationsId")
                        .HasColumnType("int");

                    b.Property<int>("StudentsId")
                        .HasColumnType("int");

                    b.HasKey("ApplicationsId", "StudentsId");

                    b.HasIndex("StudentsId");

                    b.ToTable("ApplicationStudent");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "admin",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "employee",
                            Name = "Employee",
                            NormalizedName = "EMPLOYEE"
                        },
                        new
                        {
                            Id = "advisor",
                            Name = "Advisor",
                            NormalizedName = "ADVISOR"
                        },
                        new
                        {
                            Id = "student",
                            Name = "Student",
                            NormalizedName = "STUDENT"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "0",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "156f11de-be67-467f-83f4-97ccd7c609a6",
                            Email = "admin@ipt.pt",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@IPT.PT",
                            NormalizedUserName = "ADMIN@IPT.PT",
                            PasswordHash = "AQAAAAIAAYagAAAAELNn6WE594UwZTNtjke8ScOKuhFeEbvMRgHp78SwzenRYr3Hgy02euOE2+Z4VxdjBA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e6c03042-21dd-4222-a78f-4925ed4703fc",
                            TwoFactorEnabled = false,
                            UserName = "admin@ipt.pt"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ProjectRepositoryCollection", b =>
                {
                    b.Property<int>("ProjectsId")
                        .HasColumnType("int");

                    b.Property<int>("RepositoryCollectionsId")
                        .HasColumnType("int");

                    b.HasKey("ProjectsId", "RepositoryCollectionsId");

                    b.HasIndex("RepositoryCollectionsId");

                    b.ToTable("ProjectRepositoryCollection");
                });

            modelBuilder.Entity("ProjectResearchProject", b =>
                {
                    b.Property<int>("ProjectsId")
                        .HasColumnType("int");

                    b.Property<int>("ResearchProjectsId")
                        .HasColumnType("int");

                    b.HasKey("ProjectsId", "ResearchProjectsId");

                    b.HasIndex("ResearchProjectsId");

                    b.ToTable("ProjectResearchProject");
                });

            modelBuilder.Entity("ProjectStudent", b =>
                {
                    b.Property<int>("ProjectsId")
                        .HasColumnType("int");

                    b.Property<int>("StudentsId")
                        .HasColumnType("int");

                    b.HasKey("ProjectsId", "StudentsId");

                    b.HasIndex("StudentsId");

                    b.ToTable("ProjectStudent");
                });

            modelBuilder.Entity("ProposalStudent", b =>
                {
                    b.Property<int>("AutoProposalsId")
                        .HasColumnType("int");

                    b.Property<int>("ProponentStudentsId")
                        .HasColumnType("int");

                    b.HasKey("AutoProposalsId", "ProponentStudentsId");

                    b.HasIndex("ProponentStudentsId");

                    b.ToTable("ProposalStudent");
                });

            modelBuilder.Entity("wlc2.Models.AcademicYear", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Current")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AcademicYears");
                });

            modelBuilder.Entity("wlc2.Models.AccessType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RcaapCode")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("AccessTypes");
                });

            modelBuilder.Entity("wlc2.Models.Application", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AcademicYearFK")
                        .HasColumnType("int");

                    b.Property<int>("ApplicationStatus")
                        .HasColumnType("int");

                    b.Property<DateTime>("SubmittedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AcademicYearFK");

                    b.ToTable("Applications");
                });

            modelBuilder.Entity("wlc2.Models.ApplicationProposal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ApplicationFK")
                        .HasColumnType("int");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<int>("ProposalFK")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationFK");

                    b.HasIndex("ProposalFK");

                    b.ToTable("ApplicationProposals");
                });

            modelBuilder.Entity("wlc2.Models.Area", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RenatesCode")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Areas");
                });

            modelBuilder.Entity("wlc2.Models.Course", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Abbreviation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AreaFK")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrganicUnitFK")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AreaFK");

                    b.HasIndex("OrganicUnitFK");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("wlc2.Models.Enrollment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CourseFK")
                        .HasColumnType("int");

                    b.Property<int>("ECTS")
                        .HasColumnType("int");

                    b.Property<int>("EnrollmentCompletedFK")
                        .HasColumnType("int");

                    b.Property<int>("EnrollmentStartedFK")
                        .HasColumnType("int");

                    b.Property<int>("EnrollmentStatus")
                        .HasColumnType("int");

                    b.Property<int>("StudentFK")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CourseFK");

                    b.HasIndex("EnrollmentCompletedFK");

                    b.HasIndex("EnrollmentStartedFK");

                    b.HasIndex("StudentFK");

                    b.ToTable("Enrollments");
                });

            modelBuilder.Entity("wlc2.Models.IdentificationType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("IdentificationTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "1",
                            Name = "Cartão de Cidadão ou Bilhete de Identidade Nacional"
                        },
                        new
                        {
                            Id = 2,
                            Code = "2",
                            Name = "Passaporte"
                        },
                        new
                        {
                            Id = 3,
                            Code = "3",
                            Name = "Autorização de Residência"
                        },
                        new
                        {
                            Id = 4,
                            Code = "4",
                            Name = "Bilhete de Identidade Estrangeiro"
                        },
                        new
                        {
                            Id = 5,
                            Code = "7",
                            Name = "Certificado de Registo de Cidadão da União Europeia"
                        },
                        new
                        {
                            Id = 6,
                            Code = "8",
                            Name = "Cartão de Residência Permanente de Cidadão da União Europeia"
                        },
                        new
                        {
                            Id = 7,
                            Code = "9",
                            Name = "Outro"
                        });
                });

            modelBuilder.Entity("wlc2.Models.Institution", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Site")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Institutions");
                });

            modelBuilder.Entity("wlc2.Models.JuryMember", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AdvisorFK")
                        .HasColumnType("int");

                    b.Property<int>("JuryMemberRole")
                        .HasColumnType("int");

                    b.Property<int>("ProjectDefenseFK")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AdvisorFK");

                    b.HasIndex("ProjectDefenseFK");

                    b.ToTable("JuryMembers");
                });

            modelBuilder.Entity("wlc2.Models.Language", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Alpha2Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Languages");
                });

            modelBuilder.Entity("wlc2.Models.License", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RcaapCode")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Licenses");
                });

            modelBuilder.Entity("wlc2.Models.Nationality", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Alpha2Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Nationalities");
                });

            modelBuilder.Entity("wlc2.Models.OrganicUnit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Abbreviation")
                        .HasColumnType("int");

                    b.Property<int>("ExternalCode")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("OrganicUnits");
                });

            modelBuilder.Entity("wlc2.Models.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdentificationNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IdentificationTypeFK")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NationalityFK")
                        .HasColumnType("int");

                    b.Property<string>("ORCID")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IdentificationTypeFK");

                    b.HasIndex("NationalityFK");

                    b.ToTable("Persons");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Person");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("wlc2.Models.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AbstractEN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AbstractPT")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AcademicYearFK")
                        .HasColumnType("int");

                    b.Property<int>("AccessTypeFK")
                        .HasColumnType("int");

                    b.Property<int?>("CourseId")
                        .HasColumnType("int");

                    b.Property<int>("Grade")
                        .HasColumnType("int");

                    b.Property<string>("KeywordsEN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("KeywordsPT")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LanguageFK")
                        .HasColumnType("int");

                    b.Property<int>("LicenseFK")
                        .HasColumnType("int");

                    b.Property<int>("ProjectStatus")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AcademicYearFK");

                    b.HasIndex("AccessTypeFK");

                    b.HasIndex("CourseId");

                    b.HasIndex("LanguageFK");

                    b.HasIndex("LicenseFK");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("wlc2.Models.ProjectDefense", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DefenseDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProjectFK")
                        .HasColumnType("int");

                    b.Property<string>("Room")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProjectFK")
                        .IsUnique();

                    b.ToTable("ProjectDefenses");
                });

            modelBuilder.Entity("wlc2.Models.ProjectValidation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("PersonFK")
                        .HasColumnType("int");

                    b.Property<int>("ProjectFK")
                        .HasColumnType("int");

                    b.Property<bool>("Validated")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ValidationDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("PersonFK");

                    b.HasIndex("ProjectFK");

                    b.ToTable("ProjectsValidations");
                });

            modelBuilder.Entity("wlc2.Models.Proposal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AcademicYearFK")
                        .HasColumnType("int");

                    b.Property<int>("CourseFK")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("InstitutionFK")
                        .HasColumnType("int");

                    b.Property<int>("ProposalStatus")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AcademicYearFK");

                    b.HasIndex("CourseFK");

                    b.HasIndex("InstitutionFK");

                    b.ToTable("Proposals");
                });

            modelBuilder.Entity("wlc2.Models.RepositoryCollection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrganicUnitFK")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrganicUnitFK");

                    b.ToTable("RepositoryCollections");
                });

            modelBuilder.Entity("wlc2.Models.ResearchProject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Reference")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ResearchProjects");
                });

            modelBuilder.Entity("wlc2.Models.Advisor", b =>
                {
                    b.HasBaseType("wlc2.Models.Person");

                    b.Property<bool>("External")
                        .HasColumnType("bit");

                    b.Property<bool>("PhD")
                        .HasColumnType("bit");

                    b.Property<bool>("Specialist")
                        .HasColumnType("bit");

                    b.HasDiscriminator().HasValue("Advisor");
                });

            modelBuilder.Entity("wlc2.Models.Student", b =>
                {
                    b.HasBaseType("wlc2.Models.Person");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Sex")
                        .HasColumnType("int");

                    b.Property<string>("StudentId")
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("Student");
                });

            modelBuilder.Entity("AcademicYearCourse", b =>
                {
                    b.HasOne("wlc2.Models.AcademicYear", null)
                        .WithMany()
                        .HasForeignKey("AcademicYearsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("wlc2.Models.Course", null)
                        .WithMany()
                        .HasForeignKey("CoursesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AdvisorCourse", b =>
                {
                    b.HasOne("wlc2.Models.Advisor", null)
                        .WithMany()
                        .HasForeignKey("AdvisorsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("wlc2.Models.Course", null)
                        .WithMany()
                        .HasForeignKey("CoursesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AdvisorInstitution", b =>
                {
                    b.HasOne("wlc2.Models.Advisor", null)
                        .WithMany()
                        .HasForeignKey("AdvisorsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("wlc2.Models.Institution", null)
                        .WithMany()
                        .HasForeignKey("InstitutionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AdvisorProject", b =>
                {
                    b.HasOne("wlc2.Models.Advisor", null)
                        .WithMany()
                        .HasForeignKey("AdvisorsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("wlc2.Models.Project", null)
                        .WithMany()
                        .HasForeignKey("SupervisedProjectsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AdvisorProposal", b =>
                {
                    b.HasOne("wlc2.Models.Advisor", null)
                        .WithMany()
                        .HasForeignKey("AdvisorsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("wlc2.Models.Proposal", null)
                        .WithMany()
                        .HasForeignKey("ProposalsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ApplicationStudent", b =>
                {
                    b.HasOne("wlc2.Models.Application", null)
                        .WithMany()
                        .HasForeignKey("ApplicationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("wlc2.Models.Student", null)
                        .WithMany()
                        .HasForeignKey("StudentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProjectRepositoryCollection", b =>
                {
                    b.HasOne("wlc2.Models.Project", null)
                        .WithMany()
                        .HasForeignKey("ProjectsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("wlc2.Models.RepositoryCollection", null)
                        .WithMany()
                        .HasForeignKey("RepositoryCollectionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProjectResearchProject", b =>
                {
                    b.HasOne("wlc2.Models.Project", null)
                        .WithMany()
                        .HasForeignKey("ProjectsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("wlc2.Models.ResearchProject", null)
                        .WithMany()
                        .HasForeignKey("ResearchProjectsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProjectStudent", b =>
                {
                    b.HasOne("wlc2.Models.Project", null)
                        .WithMany()
                        .HasForeignKey("ProjectsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("wlc2.Models.Student", null)
                        .WithMany()
                        .HasForeignKey("StudentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProposalStudent", b =>
                {
                    b.HasOne("wlc2.Models.Proposal", null)
                        .WithMany()
                        .HasForeignKey("AutoProposalsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("wlc2.Models.Student", null)
                        .WithMany()
                        .HasForeignKey("ProponentStudentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("wlc2.Models.Application", b =>
                {
                    b.HasOne("wlc2.Models.AcademicYear", "AcademicYear")
                        .WithMany("Applications")
                        .HasForeignKey("AcademicYearFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AcademicYear");
                });

            modelBuilder.Entity("wlc2.Models.ApplicationProposal", b =>
                {
                    b.HasOne("wlc2.Models.Application", "Aplication")
                        .WithMany("ApplicationProposals")
                        .HasForeignKey("ApplicationFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("wlc2.Models.Proposal", "Proposal")
                        .WithMany("ApplicationProposals")
                        .HasForeignKey("ProposalFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Aplication");

                    b.Navigation("Proposal");
                });

            modelBuilder.Entity("wlc2.Models.Course", b =>
                {
                    b.HasOne("wlc2.Models.Area", "Area")
                        .WithMany("Courses")
                        .HasForeignKey("AreaFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("wlc2.Models.OrganicUnit", "OrganicUnit")
                        .WithMany("Courses")
                        .HasForeignKey("OrganicUnitFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Area");

                    b.Navigation("OrganicUnit");
                });

            modelBuilder.Entity("wlc2.Models.Enrollment", b =>
                {
                    b.HasOne("wlc2.Models.Course", "Course")
                        .WithMany("Enrollments")
                        .HasForeignKey("CourseFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("wlc2.Models.AcademicYear", "EnrollmentCompleted")
                        .WithMany()
                        .HasForeignKey("EnrollmentCompletedFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("wlc2.Models.AcademicYear", "EnrollmentStarted")
                        .WithMany()
                        .HasForeignKey("EnrollmentStartedFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("wlc2.Models.Student", "Student")
                        .WithMany("Enrollments")
                        .HasForeignKey("StudentFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("EnrollmentCompleted");

                    b.Navigation("EnrollmentStarted");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("wlc2.Models.JuryMember", b =>
                {
                    b.HasOne("wlc2.Models.Advisor", "Advisor")
                        .WithMany("JuryParticipations")
                        .HasForeignKey("AdvisorFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("wlc2.Models.ProjectDefense", "ProjectDefense")
                        .WithMany("JuryMembers")
                        .HasForeignKey("ProjectDefenseFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Advisor");

                    b.Navigation("ProjectDefense");
                });

            modelBuilder.Entity("wlc2.Models.Person", b =>
                {
                    b.HasOne("wlc2.Models.IdentificationType", "IdentificationType")
                        .WithMany("Persons")
                        .HasForeignKey("IdentificationTypeFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("wlc2.Models.Nationality", "Nationality")
                        .WithMany("Persons")
                        .HasForeignKey("NationalityFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IdentificationType");

                    b.Navigation("Nationality");
                });

            modelBuilder.Entity("wlc2.Models.Project", b =>
                {
                    b.HasOne("wlc2.Models.AcademicYear", "AcademicYear")
                        .WithMany("Projects")
                        .HasForeignKey("AcademicYearFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("wlc2.Models.AccessType", "AccessType")
                        .WithMany("Projects")
                        .HasForeignKey("AccessTypeFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("wlc2.Models.Course", null)
                        .WithMany("Projects")
                        .HasForeignKey("CourseId");

                    b.HasOne("wlc2.Models.Language", "Language")
                        .WithMany("Projects")
                        .HasForeignKey("LanguageFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("wlc2.Models.License", "License")
                        .WithMany("Projects")
                        .HasForeignKey("LicenseFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AcademicYear");

                    b.Navigation("AccessType");

                    b.Navigation("Language");

                    b.Navigation("License");
                });

            modelBuilder.Entity("wlc2.Models.ProjectDefense", b =>
                {
                    b.HasOne("wlc2.Models.Project", "Project")
                        .WithOne("ProjectDefense")
                        .HasForeignKey("wlc2.Models.ProjectDefense", "ProjectFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("wlc2.Models.ProjectValidation", b =>
                {
                    b.HasOne("wlc2.Models.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("wlc2.Models.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("wlc2.Models.Proposal", b =>
                {
                    b.HasOne("wlc2.Models.AcademicYear", "AcademicYear")
                        .WithMany("Proposals")
                        .HasForeignKey("AcademicYearFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("wlc2.Models.Course", "Course")
                        .WithMany("Proposals")
                        .HasForeignKey("CourseFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("wlc2.Models.Institution", "Institution")
                        .WithMany()
                        .HasForeignKey("InstitutionFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AcademicYear");

                    b.Navigation("Course");

                    b.Navigation("Institution");
                });

            modelBuilder.Entity("wlc2.Models.RepositoryCollection", b =>
                {
                    b.HasOne("wlc2.Models.OrganicUnit", "OrganicUnit")
                        .WithMany()
                        .HasForeignKey("OrganicUnitFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OrganicUnit");
                });

            modelBuilder.Entity("wlc2.Models.AcademicYear", b =>
                {
                    b.Navigation("Applications");

                    b.Navigation("Projects");

                    b.Navigation("Proposals");
                });

            modelBuilder.Entity("wlc2.Models.AccessType", b =>
                {
                    b.Navigation("Projects");
                });

            modelBuilder.Entity("wlc2.Models.Application", b =>
                {
                    b.Navigation("ApplicationProposals");
                });

            modelBuilder.Entity("wlc2.Models.Area", b =>
                {
                    b.Navigation("Courses");
                });

            modelBuilder.Entity("wlc2.Models.Course", b =>
                {
                    b.Navigation("Enrollments");

                    b.Navigation("Projects");

                    b.Navigation("Proposals");
                });

            modelBuilder.Entity("wlc2.Models.IdentificationType", b =>
                {
                    b.Navigation("Persons");
                });

            modelBuilder.Entity("wlc2.Models.Language", b =>
                {
                    b.Navigation("Projects");
                });

            modelBuilder.Entity("wlc2.Models.License", b =>
                {
                    b.Navigation("Projects");
                });

            modelBuilder.Entity("wlc2.Models.Nationality", b =>
                {
                    b.Navigation("Persons");
                });

            modelBuilder.Entity("wlc2.Models.OrganicUnit", b =>
                {
                    b.Navigation("Courses");
                });

            modelBuilder.Entity("wlc2.Models.Project", b =>
                {
                    b.Navigation("ProjectDefense");
                });

            modelBuilder.Entity("wlc2.Models.ProjectDefense", b =>
                {
                    b.Navigation("JuryMembers");
                });

            modelBuilder.Entity("wlc2.Models.Proposal", b =>
                {
                    b.Navigation("ApplicationProposals");
                });

            modelBuilder.Entity("wlc2.Models.Advisor", b =>
                {
                    b.Navigation("JuryParticipations");
                });

            modelBuilder.Entity("wlc2.Models.Student", b =>
                {
                    b.Navigation("Enrollments");
                });
#pragma warning restore 612, 618
        }
    }
}
