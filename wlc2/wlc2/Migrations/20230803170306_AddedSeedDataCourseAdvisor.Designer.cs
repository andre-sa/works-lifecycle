// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using wlc2.Data;

#nullable disable

namespace wlc2.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230803170306_AddedSeedDataCourseAdvisor")]
    partial class AddedSeedDataCourseAdvisor
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AcademicYearCourse", b =>
                {
                    b.Property<int>("AcademicYearsId")
                        .HasColumnType("int");

                    b.Property<int>("CoursesId")
                        .HasColumnType("int");

                    b.HasKey("AcademicYearsId", "CoursesId");

                    b.HasIndex("CoursesId");

                    b.ToTable("AcademicYearCourse");
                });

            modelBuilder.Entity("AdvisorInstitution", b =>
                {
                    b.Property<int>("AdvisorsId")
                        .HasColumnType("int");

                    b.Property<int>("InstitutionsId")
                        .HasColumnType("int");

                    b.HasKey("AdvisorsId", "InstitutionsId");

                    b.HasIndex("InstitutionsId");

                    b.ToTable("AdvisorInstitution");
                });

            modelBuilder.Entity("AdvisorProject", b =>
                {
                    b.Property<int>("AdvisorsId")
                        .HasColumnType("int");

                    b.Property<int>("SupervisedProjectsId")
                        .HasColumnType("int");

                    b.HasKey("AdvisorsId", "SupervisedProjectsId");

                    b.HasIndex("SupervisedProjectsId");

                    b.ToTable("AdvisorProject");
                });

            modelBuilder.Entity("AdvisorProposal", b =>
                {
                    b.Property<int>("AdvisorsId")
                        .HasColumnType("int");

                    b.Property<int>("ProposalsId")
                        .HasColumnType("int");

                    b.HasKey("AdvisorsId", "ProposalsId");

                    b.HasIndex("ProposalsId");

                    b.ToTable("AdvisorProposal");
                });

            modelBuilder.Entity("ApplicationStudent", b =>
                {
                    b.Property<int>("ApplicationsId")
                        .HasColumnType("int");

                    b.Property<int>("StudentsId")
                        .HasColumnType("int");

                    b.HasKey("ApplicationsId", "StudentsId");

                    b.HasIndex("StudentsId");

                    b.ToTable("ApplicationStudent");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "admin",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "employee",
                            Name = "Employee",
                            NormalizedName = "EMPLOYEE"
                        },
                        new
                        {
                            Id = "advisor",
                            Name = "Advisor",
                            NormalizedName = "ADVISOR"
                        },
                        new
                        {
                            Id = "student",
                            Name = "Student",
                            NormalizedName = "STUDENT"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "0",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "112b3782-0495-4ff6-a805-6b1dab0eb272",
                            Email = "admin@ipt.pt",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@IPT.PT",
                            NormalizedUserName = "ADMIN@IPT.PT",
                            PasswordHash = "AQAAAAIAAYagAAAAEJzYAeWlGlaVixpL/OQXRkMaFz18gPN82iUwb9u4g4nC047hOwvgbFBYpOURJnkUEw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e531d0be-55aa-4908-b6de-5de5b317e8fd",
                            TwoFactorEnabled = false,
                            UserName = "admin@ipt.pt"
                        },
                        new
                        {
                            Id = "1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "86c2ffe5-3f94-40f1-9377-31222d6f4d14",
                            Email = "anacris@ipt.pt",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ANACRIS@IPT.PT",
                            NormalizedUserName = "ANACRIS@IPT.PT",
                            PasswordHash = "AQAAAAIAAYagAAAAEOWpjv/IYBQm0Lqizutw8+0ik/haCvfwS8ytnNXoCAZm0HeimZ0W+U5eksycCKLwtQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "314029b1-c492-4b9f-ae8a-d582a383d0d9",
                            TwoFactorEnabled = false,
                            UserName = "anacris@ipt.pt"
                        },
                        new
                        {
                            Id = "2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e89eb4e5-3f4d-483c-b85a-39a76da1d6c3",
                            Email = "cbatista@ipt.pt",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "CBATISTA@IPT.PT",
                            NormalizedUserName = "CBATISTA@IPT.PT",
                            PasswordHash = "AQAAAAIAAYagAAAAEDVc5UShEDOkRQipgs62xW9Z+AKDFMJsNRWIY9NRUOxJILzZNVDXE72+jYJODKYSKw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a74459a2-1eee-4f25-b12d-2e3b786b6d95",
                            TwoFactorEnabled = false,
                            UserName = "cbatista@ipt.pt"
                        },
                        new
                        {
                            Id = "3",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4c4a64fe-a62f-448f-bbd3-d287e4a7892a",
                            Email = "manso@ipt.pt",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "MANSO@IPT.PT",
                            NormalizedUserName = "MANSO@IPT.PT",
                            PasswordHash = "AQAAAAIAAYagAAAAEPNGiKMVvZTYEPPLsUKu/ICn9xLb3OVn0djrDDB8SzTxbuhLOYd4Ax6UV+uY1397QA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "214d02d8-0af8-44de-a1b9-db910f976e79",
                            TwoFactorEnabled = false,
                            UserName = "manso@ipt.pt"
                        },
                        new
                        {
                            Id = "4",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "77883b63-e6b4-4e29-9538-1db04e90a413",
                            Email = "bruno.almeida@ipt.pt",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "BRUNO.ALMEIDA@IPT.PT",
                            NormalizedUserName = "BRUNO.ALMEIDA@IPT.PT",
                            PasswordHash = "AQAAAAIAAYagAAAAEDw5Omke6fL/V5l6xJMb4cRD0fWIjXfQzk1DwY+yY8vBhTBR5DfXd3cOgg7xOxYiJA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ff0f5f2e-cc7b-4b46-96af-2fdcdd7f7189",
                            TwoFactorEnabled = false,
                            UserName = "bruno.almeida@ipt.pt"
                        },
                        new
                        {
                            Id = "5",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7fcd9a44-cb59-401e-930a-07f302a7a563",
                            Email = "carloqrz@ipt.pt",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "CARLOQRZ@IPT.PT",
                            NormalizedUserName = "CARLOQRZ@IPT.PT",
                            PasswordHash = "AQAAAAIAAYagAAAAEJyAjLdFFOzRmdTiycAGbN3HSWQOmySnbGYC20jp25lwGlNAGAFfNolbC8Y2hEyVNg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "92a44c68-0baa-4447-a7fa-79356bcd0de8",
                            TwoFactorEnabled = false,
                            UserName = "carloqrz@ipt.pt"
                        },
                        new
                        {
                            Id = "6",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7873423b-5113-4e76-85d2-101649c343ab",
                            Email = "carlos.perquilhas@ipt.pt",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "CARLOS.PERQUILHAS@IPT.PT",
                            NormalizedUserName = "CARLOS.PERQUILHAS@IPT.PT",
                            PasswordHash = "AQAAAAIAAYagAAAAECEfLRae8Sb1Pj32YZF3O599idgOwXIy9r8B+HopXYbehR1XYVryojW3WAkvaii1/g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ef9c3ac9-8dc0-4f80-9639-96466e877418",
                            TwoFactorEnabled = false,
                            UserName = "carlos.perquilhas@ipt.pt"
                        },
                        new
                        {
                            Id = "7",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ca7b1564-fbd7-428b-9a4e-efed177dc665",
                            Email = "fnunes@ipt.pt",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "FNUNES@IPT.PT",
                            NormalizedUserName = "FNUNES@IPT.PT",
                            PasswordHash = "AQAAAAIAAYagAAAAEAubkXMhsRvJvvbkyUgNMBl7KU08Ln7uGqkqPJa25bazs/bCDpGjkUxt2eJeL1mJMQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "97175740-ed8b-4f9b-943b-510927028c07",
                            TwoFactorEnabled = false,
                            UserName = "fnunes@ipt.pt"
                        },
                        new
                        {
                            Id = "8",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1c0000de-b31b-476c-83d2-a412585ec77e",
                            Email = "casimiro@ipt.pt",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "CASIMIRO@IPT.PT",
                            NormalizedUserName = "CASIMIRO@IPT.PT",
                            PasswordHash = "AQAAAAIAAYagAAAAEO2DWz7l0Adffy5oZROzQcEbziM+slcEx585EIomm2R86bv8qTgveLI4sgiEosko8w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "99e57bed-6a05-4541-a2e5-77d0189c2473",
                            TwoFactorEnabled = false,
                            UserName = "casimiro@ipt.pt"
                        },
                        new
                        {
                            Id = "9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "17abe005-310e-4aa2-a3a4-0163a10f06e8",
                            Email = "loliveira@ipt.pt",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "LOLIVEIRA@IPT.PT",
                            NormalizedUserName = "LOLIVEIRA@IPT.PT",
                            PasswordHash = "AQAAAAIAAYagAAAAEDWczbY29CE1oShMddiTMT8ndlKkU/uJA6aHgFyubIg8uZrVmw1Ro8/tOJBkVry7Iw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "97bbcb08-6da9-4db4-bc29-0cb29cec6e44",
                            TwoFactorEnabled = false,
                            UserName = "loliveira@ipt.pt"
                        },
                        new
                        {
                            Id = "10",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8a6eef1c-3f7f-4294-b32e-bd9e4697d39c",
                            Email = "fmbarros@ipt.pt",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "FMBARROS@IPT.PT",
                            NormalizedUserName = "FMBARROS@IPT.PT",
                            PasswordHash = "AQAAAAIAAYagAAAAEKJXet8rB7eI64sJY4wIXJBjmGPLJPIX7pMoSgUUXEL2eCQ4F0iyNivq70t/K9NOUw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "15ca0fea-14b1-4595-a3cf-122219989515",
                            TwoFactorEnabled = false,
                            UserName = "fmbarros@ipt.pt"
                        },
                        new
                        {
                            Id = "11",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a115c0c2-23bf-43db-92ef-2af499d28cba",
                            Email = "gppires@ipt.pt",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "GPPIRES@IPT.PT",
                            NormalizedUserName = "GPPIRES@IPT.PT",
                            PasswordHash = "AQAAAAIAAYagAAAAED3t8aAgdoBclGU8lnopHkCpCdH6Y5KSY9RxCBUa+4EbomdDQrEFtzMp4F3n11YKjg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9a9d2127-9f12-4b09-9b8f-40c7b8349d59",
                            TwoFactorEnabled = false,
                            UserName = "gppires@ipt.pt"
                        },
                        new
                        {
                            Id = "12",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5e994471-937b-41bb-a73d-72e40c5a1153",
                            Email = "renato.panda@ipt.pt",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "RENATO.PANDA@IPT.PT",
                            NormalizedUserName = "RENATO.PANDA@IPT.PT",
                            PasswordHash = "AQAAAAIAAYagAAAAEKyoXI2HGgJgHOs1Qxm3k8uLKhy3IaMjNBK5N6bmDvdi3PG2eM0HUvFfMq6U09S12g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "edae9e39-e2e0-452f-b2fd-f66743323872",
                            TwoFactorEnabled = false,
                            UserName = "renato.panda@ipt.pt"
                        },
                        new
                        {
                            Id = "13",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0fbfdd2a-bb8d-4240-9573-26f772743d64",
                            Email = "aluno15501@ipt.pt",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ALUNO15501@IPT.PT",
                            NormalizedUserName = "ALUNO15501@IPT.PT",
                            PasswordHash = "AQAAAAIAAYagAAAAEKL6ceKxRVJPSW6GtFB/fqPLjCbUXG5uBFEKVCHW5RioaKN8uqHll63hPrL+hUITdg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d3c54ff7-ccce-4cfe-ae55-07dcb537725e",
                            TwoFactorEnabled = false,
                            UserName = "aluno15501@ipt.pt"
                        },
                        new
                        {
                            Id = "14",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "cbc7ebfd-6a30-4f7b-bc65-44de08c1eca6",
                            Email = "aluno20568@ipt.pt",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ALUNO20568@IPT.PT",
                            NormalizedUserName = "ALUNO20568@IPT.PT",
                            PasswordHash = "AQAAAAIAAYagAAAAEFfrlcRYGg68RlH4huu5K/2zMifrlhhQR6ztA7rH6eDf6enoDxgGr2OXkyOm9ROKMw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b3ef7908-d602-49d0-9161-646b65a37b9c",
                            TwoFactorEnabled = false,
                            UserName = "aluno20568@ipt.pt"
                        },
                        new
                        {
                            Id = "15",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6594e714-2b47-43ba-81c1-4500c0278bd6",
                            Email = "aluno20796@ipt.pt",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ALUNO20796@IPT.PT",
                            NormalizedUserName = "ALUNO20796@IPT.PT",
                            PasswordHash = "AQAAAAIAAYagAAAAEKgAMz6yG/kwrbPJYkrAtwoj/I2MdN7eGjEgz3srKrDBOYw3mMCCMa5hv+FTTjPYng==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1824082f-df43-4d38-9b16-748366b01afe",
                            TwoFactorEnabled = false,
                            UserName = "aluno20796@ipt.pt"
                        },
                        new
                        {
                            Id = "16",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c0b02753-0129-423d-a372-190db9285ab3",
                            Email = "aluno21876@ipt.pt",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ALUNO21876@IPT.PT",
                            NormalizedUserName = "ALUNO21876@IPT.PT",
                            PasswordHash = "AQAAAAIAAYagAAAAECL1d9hJX0twfUKy15iGSdwHp8hbOmZ8NnPeH++2lVSxWp+zuDDf486Z/sbTuUpw/g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2d18ba8b-978e-454a-beba-4ee7b8e691a3",
                            TwoFactorEnabled = false,
                            UserName = "aluno21876@ipt.pt"
                        },
                        new
                        {
                            Id = "17",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d74ad550-ce32-447a-acf3-6db20730f64d",
                            Email = "aluno21296@ipt.pt",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ALUNO21296@IPT.PT",
                            NormalizedUserName = "ALUNO21296@IPT.PT",
                            PasswordHash = "AQAAAAIAAYagAAAAEO51ZiH+LZGvXsTMvkQlwSVKcAXZFRFoA1JiaLsXq5Fhpk3tGwSuWsvCkuL0l13noA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f1231f82-20b9-47c9-9b4c-13f5b00c8b08",
                            TwoFactorEnabled = false,
                            UserName = "aluno21296@ipt.pt"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "0",
                            RoleId = "admin"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ProjectRepositoryCollection", b =>
                {
                    b.Property<int>("ProjectsId")
                        .HasColumnType("int");

                    b.Property<int>("RepositoryCollectionsId")
                        .HasColumnType("int");

                    b.HasKey("ProjectsId", "RepositoryCollectionsId");

                    b.HasIndex("RepositoryCollectionsId");

                    b.ToTable("ProjectRepositoryCollection");
                });

            modelBuilder.Entity("ProjectResearchProject", b =>
                {
                    b.Property<int>("ProjectsId")
                        .HasColumnType("int");

                    b.Property<int>("ResearchProjectsId")
                        .HasColumnType("int");

                    b.HasKey("ProjectsId", "ResearchProjectsId");

                    b.HasIndex("ResearchProjectsId");

                    b.ToTable("ProjectResearchProject");
                });

            modelBuilder.Entity("ProjectStudent", b =>
                {
                    b.Property<int>("ProjectsId")
                        .HasColumnType("int");

                    b.Property<int>("StudentsId")
                        .HasColumnType("int");

                    b.HasKey("ProjectsId", "StudentsId");

                    b.HasIndex("StudentsId");

                    b.ToTable("ProjectStudent");
                });

            modelBuilder.Entity("ProposalStudent", b =>
                {
                    b.Property<int>("AutoProposalsId")
                        .HasColumnType("int");

                    b.Property<int>("ProponentStudentsId")
                        .HasColumnType("int");

                    b.HasKey("AutoProposalsId", "ProponentStudentsId");

                    b.HasIndex("ProponentStudentsId");

                    b.ToTable("ProposalStudent");
                });

            modelBuilder.Entity("wlc2.Models.AcademicYear", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Current")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AcademicYears");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Current = false,
                            Name = "2020-2021"
                        },
                        new
                        {
                            Id = 2,
                            Current = false,
                            Name = "2021-2022"
                        },
                        new
                        {
                            Id = 3,
                            Current = true,
                            Name = "2022-2023"
                        });
                });

            modelBuilder.Entity("wlc2.Models.AccessType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RcaapCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AccessTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Acesso Aberto",
                            RcaapCode = "openAccess"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Acesso Restrito",
                            RcaapCode = "restrictedAccess"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Acesso Embargado",
                            RcaapCode = "embargoedAccess"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Acesso Fechado",
                            RcaapCode = "closedAccess"
                        });
                });

            modelBuilder.Entity("wlc2.Models.Application", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AcademicYearFK")
                        .HasColumnType("int");

                    b.Property<int>("ApplicationStatus")
                        .HasColumnType("int");

                    b.Property<DateTime>("SubmittedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AcademicYearFK");

                    b.ToTable("Applications");
                });

            modelBuilder.Entity("wlc2.Models.ApplicationProposal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ApplicationFK")
                        .HasColumnType("int");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<int>("ProposalFK")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationFK");

                    b.HasIndex("ProposalFK");

                    b.ToTable("ApplicationProposals");
                });

            modelBuilder.Entity("wlc2.Models.Area", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RenatesCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Areas");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Programas Gerais",
                            RenatesCode = "0.."
                        },
                        new
                        {
                            Id = 2,
                            Name = "Programas de Base",
                            RenatesCode = "0.1.0"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Alfabetização",
                            RenatesCode = "0.8.0"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Desenvolvimento pessoal",
                            RenatesCode = "0.9.0"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Educação",
                            RenatesCode = "1.0.0"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Formação de Professores / Formadores e Ciências da Educação",
                            RenatesCode = "1.4.0"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Ciências da Educação",
                            RenatesCode = "1.4.2"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Formação de Educadores de Infância",
                            RenatesCode = "1.4.3"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Formação de Professores do Ensino Básico (1.o e 2.o Ciclos)",
                            RenatesCode = "1.4.4"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Formação de Professores de Áreas Disciplinares Específicas",
                            RenatesCode = "1.4.5"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Formação de Professores e Formadores de Áreas Tecnológicas",
                            RenatesCode = "1.4.6"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Formação de Professores/formadores e ciências da educação - programas não classificados noutra área de formação.",
                            RenatesCode = "1.4.9"
                        },
                        new
                        {
                            Id = 13,
                            Name = "Artes e Humanidades",
                            RenatesCode = "2.."
                        },
                        new
                        {
                            Id = 14,
                            Name = "Belas-Artes",
                            RenatesCode = "2.1.1"
                        },
                        new
                        {
                            Id = 15,
                            Name = "Artes do Espectáculo",
                            RenatesCode = "2.1.2"
                        },
                        new
                        {
                            Id = 16,
                            Name = "Áudio-Visuais e Produção dos Media",
                            RenatesCode = "2.1.3"
                        },
                        new
                        {
                            Id = 17,
                            Name = "Design",
                            RenatesCode = "2.1.4"
                        },
                        new
                        {
                            Id = 18,
                            Name = "Artesanato",
                            RenatesCode = "2.1.5"
                        },
                        new
                        {
                            Id = 19,
                            Name = "Artes - Programas não classificados noutra área de formação",
                            RenatesCode = "2.1.9"
                        },
                        new
                        {
                            Id = 20,
                            Name = "Humanidades",
                            RenatesCode = "2.2.."
                        },
                        new
                        {
                            Id = 21,
                            Name = "Religião e Teologia",
                            RenatesCode = "2.2.1"
                        },
                        new
                        {
                            Id = 22,
                            Name = "Línguas e Literaturas Estrangeiras",
                            RenatesCode = "2.2.2"
                        },
                        new
                        {
                            Id = 23,
                            Name = "Língua e Literatura Materna",
                            RenatesCode = "2.2.3"
                        },
                        new
                        {
                            Id = 24,
                            Name = "História e Arqueologia",
                            RenatesCode = "2.2.5"
                        },
                        new
                        {
                            Id = 25,
                            Name = "Filosofia e Ética",
                            RenatesCode = "2.2.6"
                        },
                        new
                        {
                            Id = 26,
                            Name = "Humanidades - Programas não classificados noutra área de formação",
                            RenatesCode = "2.2.9"
                        },
                        new
                        {
                            Id = 27,
                            Name = "Ciências Sociais, Comércio e Direito",
                            RenatesCode = "3.."
                        },
                        new
                        {
                            Id = 28,
                            Name = "Psicologia",
                            RenatesCode = "3.1.1"
                        },
                        new
                        {
                            Id = 29,
                            Name = "Sociologia e Outros Estudos",
                            RenatesCode = "3.1.2"
                        },
                        new
                        {
                            Id = 30,
                            Name = "Ciência Política e Cidadania",
                            RenatesCode = "3.1.3"
                        },
                        new
                        {
                            Id = 31,
                            Name = "Economia",
                            RenatesCode = "3.1.4"
                        },
                        new
                        {
                            Id = 32,
                            Name = "Ciências Sociais e do Comportamento - programas não classificados noutra área de formação",
                            RenatesCode = "3.1.9"
                        },
                        new
                        {
                            Id = 33,
                            Name = "Informação e Jornalismo",
                            RenatesCode = "3.2.."
                        },
                        new
                        {
                            Id = 34,
                            Name = "Jornalismo e Reportagem",
                            RenatesCode = "3.2.1"
                        },
                        new
                        {
                            Id = 35,
                            Name = "Biblioteconomia, Arquivo e Documentação (BAD)",
                            RenatesCode = "3.2.2"
                        },
                        new
                        {
                            Id = 36,
                            Name = "Informação e Jornalismo - programas não classificados noutra área de formação",
                            RenatesCode = "3.2.9"
                        },
                        new
                        {
                            Id = 37,
                            Name = "Ciências Empresariais",
                            RenatesCode = "3.4.."
                        },
                        new
                        {
                            Id = 38,
                            Name = "Comércio",
                            RenatesCode = "3.4.1"
                        },
                        new
                        {
                            Id = 39,
                            Name = "Marketing e Publicidade",
                            RenatesCode = "3.4.2"
                        },
                        new
                        {
                            Id = 40,
                            Name = "Finanças, Banca e Seguros",
                            RenatesCode = "3.4.3"
                        },
                        new
                        {
                            Id = 41,
                            Name = "Contabilidade e Fiscalidade",
                            RenatesCode = "3.4.4"
                        },
                        new
                        {
                            Id = 42,
                            Name = "Gestão e Administração",
                            RenatesCode = "3.4.5"
                        },
                        new
                        {
                            Id = 43,
                            Name = "Secretariado e Trabalho Administrativo",
                            RenatesCode = "3.4.6"
                        },
                        new
                        {
                            Id = 44,
                            Name = "Enquadramento na Organização/Empresa",
                            RenatesCode = "3.4.7"
                        },
                        new
                        {
                            Id = 45,
                            Name = "Ciências Empresariais - programas não classificados noutra área de formação",
                            RenatesCode = "3.4.9"
                        },
                        new
                        {
                            Id = 46,
                            Name = "Direito",
                            RenatesCode = "3.8.0"
                        },
                        new
                        {
                            Id = 47,
                            Name = "Ciências, Matemática e Informática",
                            RenatesCode = "4.."
                        },
                        new
                        {
                            Id = 48,
                            Name = "Biologia e Bioquímica",
                            RenatesCode = "4.2.1"
                        },
                        new
                        {
                            Id = 49,
                            Name = "Ciências do Ambiente",
                            RenatesCode = "4.2.2"
                        },
                        new
                        {
                            Id = 50,
                            Name = "Ciências da Vida - programas não classificados noutra área de formação",
                            RenatesCode = "4.2.9"
                        },
                        new
                        {
                            Id = 51,
                            Name = "Ciências Físicas",
                            RenatesCode = "4.4.."
                        },
                        new
                        {
                            Id = 52,
                            Name = "Física",
                            RenatesCode = "4.4.1"
                        },
                        new
                        {
                            Id = 53,
                            Name = "Química",
                            RenatesCode = "4.4.2"
                        },
                        new
                        {
                            Id = 54,
                            Name = "Ciências da Terra",
                            RenatesCode = "4.4.3"
                        },
                        new
                        {
                            Id = 55,
                            Name = "Ciências Físicas - programas não classificados noutra área de formação",
                            RenatesCode = "4.4.9"
                        },
                        new
                        {
                            Id = 56,
                            Name = "Matemática e Estatística",
                            RenatesCode = "4.6.."
                        },
                        new
                        {
                            Id = 57,
                            Name = "Matemática",
                            RenatesCode = "4.6.1"
                        },
                        new
                        {
                            Id = 58,
                            Name = "Estatística",
                            RenatesCode = "4.6.2"
                        },
                        new
                        {
                            Id = 59,
                            Name = "Matemática e Estatística - programas não classificados noutra área de formação",
                            RenatesCode = "4.6.9"
                        },
                        new
                        {
                            Id = 60,
                            Name = "Informática",
                            RenatesCode = "4.8.."
                        },
                        new
                        {
                            Id = 61,
                            Name = "Ciências Informáticas",
                            RenatesCode = "4.8.1"
                        },
                        new
                        {
                            Id = 62,
                            Name = "Informática na Óptica do Utilizador",
                            RenatesCode = "4.8.2"
                        },
                        new
                        {
                            Id = 63,
                            Name = "Informática - programas não classificados noutra área de formação",
                            RenatesCode = "4.8.9"
                        },
                        new
                        {
                            Id = 64,
                            Name = "Engenharia, Indústrias Transformadoras e Construção",
                            RenatesCode = "5.."
                        },
                        new
                        {
                            Id = 65,
                            Name = "Metalurgia e Metalomecânica",
                            RenatesCode = "5.2.1"
                        },
                        new
                        {
                            Id = 66,
                            Name = "Electricidade e Energia",
                            RenatesCode = "5.2.2"
                        },
                        new
                        {
                            Id = 67,
                            Name = "Electrónica e Automação",
                            RenatesCode = "5.2.3"
                        },
                        new
                        {
                            Id = 68,
                            Name = "Tecnologia dos Processos Químicos",
                            RenatesCode = "5.2.4"
                        },
                        new
                        {
                            Id = 69,
                            Name = "Construção e Reparação de Veículos a Motor",
                            RenatesCode = "5.2.5"
                        },
                        new
                        {
                            Id = 70,
                            Name = "Engenharia e Técnicas Afins - programas não classificados noutra área de formação",
                            RenatesCode = "5.2.9"
                        },
                        new
                        {
                            Id = 71,
                            Name = "Indústrias Transformadoras",
                            RenatesCode = "5.4.."
                        },
                        new
                        {
                            Id = 72,
                            Name = "Indústrias Alimentares",
                            RenatesCode = "5.4.1"
                        },
                        new
                        {
                            Id = 73,
                            Name = "Indústrias do Têxtil, Vestuário, Calçado e Couro",
                            RenatesCode = "5.4.2"
                        },
                        new
                        {
                            Id = 74,
                            Name = "Materiais (Indústrias da Madeira, Cortiça, Papel, Plástico, Vidro e outros)",
                            RenatesCode = "5.4.3"
                        },
                        new
                        {
                            Id = 75,
                            Name = "Indústrias Extractivas",
                            RenatesCode = "5.4.4"
                        },
                        new
                        {
                            Id = 76,
                            Name = "Indústrias Transformadoras - programas não classificados noutra área de formação",
                            RenatesCode = "5.4.9"
                        },
                        new
                        {
                            Id = 77,
                            Name = "Arquitectura e Construção",
                            RenatesCode = "5.8.."
                        },
                        new
                        {
                            Id = 78,
                            Name = "Arquitectura e Urbanismo",
                            RenatesCode = "5.8.1"
                        },
                        new
                        {
                            Id = 79,
                            Name = "Construção Civil e Engenharia Civil",
                            RenatesCode = "5.8.2"
                        },
                        new
                        {
                            Id = 80,
                            Name = "Arquitectura e Construção - programas não classificados noutra área de formação",
                            RenatesCode = "5.8.9"
                        },
                        new
                        {
                            Id = 81,
                            Name = "Agricultura",
                            RenatesCode = "6.."
                        },
                        new
                        {
                            Id = 82,
                            Name = "Produção Agrícola e Animal",
                            RenatesCode = "6.2.1"
                        },
                        new
                        {
                            Id = 83,
                            Name = "Floricultura e Jardinagem",
                            RenatesCode = "6.2.2"
                        },
                        new
                        {
                            Id = 84,
                            Name = "Silvicultura e Caça",
                            RenatesCode = "6.2.3"
                        },
                        new
                        {
                            Id = 85,
                            Name = "Pescas",
                            RenatesCode = "6.2.4"
                        },
                        new
                        {
                            Id = 86,
                            Name = "Agricultura, Silvicultura e Pescas - programas não classificados noutra área de formação",
                            RenatesCode = "6.2.9"
                        },
                        new
                        {
                            Id = 87,
                            Name = "Saúde e Protecção Social",
                            RenatesCode = "7.."
                        },
                        new
                        {
                            Id = 88,
                            Name = "Medicina",
                            RenatesCode = "7.2.1"
                        },
                        new
                        {
                            Id = 89,
                            Name = "Enfermagem",
                            RenatesCode = "7.2.3"
                        },
                        new
                        {
                            Id = 90,
                            Name = "Ciências Dentárias",
                            RenatesCode = "7.2.4"
                        },
                        new
                        {
                            Id = 91,
                            Name = "Tecnologias de Diagnóstico e Terapêutica",
                            RenatesCode = "7.2.5"
                        },
                        new
                        {
                            Id = 92,
                            Name = "Terapia e Reabilitação",
                            RenatesCode = "7.2.6"
                        },
                        new
                        {
                            Id = 93,
                            Name = "Ciências Farmacêuticas",
                            RenatesCode = "7.2.7"
                        },
                        new
                        {
                            Id = 94,
                            Name = "Saúde - programas não classificados noutra área de formação",
                            RenatesCode = "7.2.9"
                        },
                        new
                        {
                            Id = 95,
                            Name = "Serviços Sociais",
                            RenatesCode = "7.6.."
                        },
                        new
                        {
                            Id = 96,
                            Name = "Serviços de Apoio a Crianças e Jovens",
                            RenatesCode = "7.6.1"
                        },
                        new
                        {
                            Id = 97,
                            Name = "Trabalho Social e Orientação",
                            RenatesCode = "7.6.2"
                        },
                        new
                        {
                            Id = 98,
                            Name = "Serviços Sociais - programas não classificados noutra área de formação",
                            RenatesCode = "7.6.9"
                        },
                        new
                        {
                            Id = 99,
                            Name = "Serviços Pessoais",
                            RenatesCode = "8.1.."
                        },
                        new
                        {
                            Id = 100,
                            Name = "Hotelaria e Restauração",
                            RenatesCode = "8.1.1"
                        },
                        new
                        {
                            Id = 101,
                            Name = "Turismo e Lazer",
                            RenatesCode = "8.1.2"
                        },
                        new
                        {
                            Id = 102,
                            Name = "Desporto",
                            RenatesCode = "8.1.3"
                        },
                        new
                        {
                            Id = 103,
                            Name = "Serviços Domésticos",
                            RenatesCode = "8.1.4"
                        },
                        new
                        {
                            Id = 104,
                            Name = "Cuidados de beleza",
                            RenatesCode = "8.1.5"
                        },
                        new
                        {
                            Id = 105,
                            Name = "Serviços Pessoais - programas não classificados noutra área de formação",
                            RenatesCode = "8.1.9"
                        },
                        new
                        {
                            Id = 106,
                            Name = "Serviços de Transporte",
                            RenatesCode = "8.4.."
                        },
                        new
                        {
                            Id = 107,
                            Name = "Protecção do Ambiente",
                            RenatesCode = "8.5.."
                        },
                        new
                        {
                            Id = 108,
                            Name = "Tecnologia de Protecção do Ambiente",
                            RenatesCode = "8.5.1"
                        },
                        new
                        {
                            Id = 109,
                            Name = "Ambientes Naturais e Vida Selvagem",
                            RenatesCode = "8.5.2"
                        },
                        new
                        {
                            Id = 110,
                            Name = "Serviços de Saúde Pública",
                            RenatesCode = "8.5.3"
                        },
                        new
                        {
                            Id = 111,
                            Name = "Protecção do Ambiente - programas não classificados noutra área de formação",
                            RenatesCode = "8.5.9"
                        },
                        new
                        {
                            Id = 112,
                            Name = "Serviços de Segurança",
                            RenatesCode = "8.6.."
                        },
                        new
                        {
                            Id = 113,
                            Name = "Protecção de Pessoas e Bens",
                            RenatesCode = "8.6.1"
                        },
                        new
                        {
                            Id = 114,
                            Name = "Segurança e Higiene no Trabalho",
                            RenatesCode = "8.6.2"
                        },
                        new
                        {
                            Id = 115,
                            Name = "Segurança Militar",
                            RenatesCode = "8.6.3"
                        },
                        new
                        {
                            Id = 116,
                            Name = "Serviços de Segurança - programas não classificados noutra área de formação",
                            RenatesCode = "8.6.9"
                        });
                });

            modelBuilder.Entity("wlc2.Models.Course", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AreaFK")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Degree")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrganicUnitFK")
                        .HasColumnType("int");

                    b.Property<int?>("PersonId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AreaFK");

                    b.HasIndex("OrganicUnitFK");

                    b.HasIndex("PersonId");

                    b.ToTable("Courses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AreaFK = 16,
                            Code = "L177",
                            Degree = 0,
                            Name = "Cinema Documental",
                            OrganicUnitFK = 2
                        },
                        new
                        {
                            Id = 2,
                            AreaFK = 61,
                            Code = "L211",
                            Degree = 0,
                            Name = "Computação e Logística",
                            OrganicUnitFK = 2
                        },
                        new
                        {
                            Id = 3,
                            AreaFK = 34,
                            Code = "9054",
                            Degree = 0,
                            Name = "Comunicação Social",
                            OrganicUnitFK = 2
                        },
                        new
                        {
                            Id = 4,
                            AreaFK = 34,
                            Code = "L297",
                            Degree = 0,
                            Name = "Comunicação Social: Jornalismo e Comunicação Empresarial",
                            OrganicUnitFK = 2
                        },
                        new
                        {
                            Id = 5,
                            AreaFK = 18,
                            Code = "9380",
                            Degree = 0,
                            Name = "Conservação e Restauro",
                            OrganicUnitFK = 3
                        },
                        new
                        {
                            Id = 6,
                            AreaFK = 79,
                            Code = "L106",
                            Degree = 0,
                            Name = "Construção e Reabilitação",
                            OrganicUnitFK = 3
                        },
                        new
                        {
                            Id = 7,
                            AreaFK = 41,
                            Code = "9056",
                            Degree = 0,
                            Name = "Contabilidade",
                            OrganicUnitFK = 1
                        },
                        new
                        {
                            Id = 8,
                            AreaFK = 16,
                            Code = "9644",
                            Degree = 0,
                            Name = "Design e Tecnologia das Artes Gráficas",
                            OrganicUnitFK = 3
                        },
                        new
                        {
                            Id = 9,
                            AreaFK = 79,
                            Code = "9089",
                            Degree = 0,
                            Name = "Engenharia Civil",
                            OrganicUnitFK = 3
                        },
                        new
                        {
                            Id = 10,
                            AreaFK = 67,
                            Code = "9112",
                            Degree = 0,
                            Name = "Engenharia Electrotécnica e de Computadores",
                            OrganicUnitFK = 3
                        },
                        new
                        {
                            Id = 11,
                            AreaFK = 67,
                            Code = "9119",
                            Degree = 0,
                            Name = "Engenharia Informática",
                            OrganicUnitFK = 3
                        },
                        new
                        {
                            Id = 12,
                            AreaFK = 65,
                            Code = "9123",
                            Degree = 0,
                            Name = "Engenharia Mecânica",
                            OrganicUnitFK = 2
                        },
                        new
                        {
                            Id = 13,
                            AreaFK = 68,
                            Code = "9184",
                            Degree = 0,
                            Name = "Engenharia Química e Bioquímica",
                            OrganicUnitFK = 3
                        },
                        new
                        {
                            Id = 14,
                            AreaFK = 16,
                            Code = "9645",
                            Degree = 0,
                            Name = "Fotografia",
                            OrganicUnitFK = 3
                        },
                        new
                        {
                            Id = 15,
                            AreaFK = 101,
                            Code = "9641",
                            Degree = 0,
                            Name = "Gestão Turística e Cultural",
                            OrganicUnitFK = 1
                        },
                        new
                        {
                            Id = 16,
                            AreaFK = 79,
                            Code = "L186",
                            Degree = 0,
                            Name = "Gestão da Edificação e Obras",
                            OrganicUnitFK = 3
                        },
                        new
                        {
                            Id = 17,
                            AreaFK = 42,
                            Code = "9152",
                            Degree = 0,
                            Name = "Gestão de Empresas",
                            OrganicUnitFK = 1
                        },
                        new
                        {
                            Id = 18,
                            AreaFK = 42,
                            Code = "9640",
                            Degree = 0,
                            Name = "Gestão de Recursos Humanos e Comportamento Organizacional",
                            OrganicUnitFK = 1
                        },
                        new
                        {
                            Id = 19,
                            AreaFK = 61,
                            Code = "L143",
                            Degree = 0,
                            Name = "Informática e Tecnologias Multimédia",
                            OrganicUnitFK = 2
                        },
                        new
                        {
                            Id = 20,
                            AreaFK = 68,
                            Code = "L142",
                            Degree = 0,
                            Name = "Tecnologia Química",
                            OrganicUnitFK = 3
                        },
                        new
                        {
                            Id = 21,
                            AreaFK = 101,
                            Code = "L207",
                            Degree = 0,
                            Name = "Turismo e Gestão do Património Cultural",
                            OrganicUnitFK = 1
                        },
                        new
                        {
                            Id = 22,
                            AreaFK = 61,
                            Code = "M932",
                            Degree = 1,
                            Name = "Analítica e Inteligência Organizacional",
                            OrganicUnitFK = 3
                        },
                        new
                        {
                            Id = 23,
                            AreaFK = 24,
                            Code = "6498",
                            Degree = 1,
                            Name = "Arqueologia Pré-Histórica e Arte Rupestre",
                            OrganicUnitFK = 3
                        },
                        new
                        {
                            Id = 24,
                            AreaFK = 40,
                            Code = "M925",
                            Degree = 1,
                            Name = "Auditoria e Finanças",
                            OrganicUnitFK = 1
                        },
                        new
                        {
                            Id = 25,
                            AreaFK = 42,
                            Code = "MB41",
                            Degree = 1,
                            Name = "Avaliação e Gestão de Ativos Imobiliários",
                            OrganicUnitFK = 3
                        },
                        new
                        {
                            Id = 26,
                            AreaFK = 18,
                            Code = "9405",
                            Degree = 1,
                            Name = "Conservação e Restauro",
                            OrganicUnitFK = 3
                        },
                        new
                        {
                            Id = 27,
                            AreaFK = 101,
                            Code = "M013",
                            Degree = 1,
                            Name = "Desenvolvimento de Produtos de Turismo Cultural",
                            OrganicUnitFK = 1
                        },
                        new
                        {
                            Id = 28,
                            AreaFK = 17,
                            Code = "M474",
                            Degree = 1,
                            Name = "Design Editorial",
                            OrganicUnitFK = 3
                        },
                        new
                        {
                            Id = 29,
                            AreaFK = 67,
                            Code = "M778",
                            Degree = 1,
                            Name = "Engenharia Eletrotécnica",
                            OrganicUnitFK = 3
                        },
                        new
                        {
                            Id = 30,
                            AreaFK = 61,
                            Code = "M909",
                            Degree = 1,
                            Name = "Engenharia Informática-Internet das Coisas",
                            OrganicUnitFK = 3
                        },
                        new
                        {
                            Id = 31,
                            AreaFK = 65,
                            Code = "M746",
                            Degree = 1,
                            Name = "Engenharia Mecânica - Projecto e Produção Mecânica",
                            OrganicUnitFK = 2
                        },
                        new
                        {
                            Id = 32,
                            AreaFK = 42,
                            Code = "9295",
                            Degree = 1,
                            Name = "Gestão",
                            OrganicUnitFK = 1
                        },
                        new
                        {
                            Id = 33,
                            AreaFK = 42,
                            Code = "9299",
                            Degree = 1,
                            Name = "Gestão de Recursos Humanos",
                            OrganicUnitFK = 1
                        },
                        new
                        {
                            Id = 34,
                            AreaFK = 78,
                            Code = "M199",
                            Degree = 1,
                            Name = "Reabilitação Urbana",
                            OrganicUnitFK = 3
                        },
                        new
                        {
                            Id = 35,
                            AreaFK = 68,
                            Code = "M079",
                            Degree = 1,
                            Name = "Tecnologia Química",
                            OrganicUnitFK = 3
                        },
                        new
                        {
                            Id = 36,
                            AreaFK = 24,
                            Code = "M197",
                            Degree = 1,
                            Name = "Técnicas de Arqueologia",
                            OrganicUnitFK = 3
                        },
                        new
                        {
                            Id = 37,
                            AreaFK = 24,
                            Code = "PA58",
                            Degree = 2,
                            Name = "Património, Tecnologia e Território",
                            OrganicUnitFK = 3
                        });
                });

            modelBuilder.Entity("wlc2.Models.CourseAdvisor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AdvisorFK")
                        .HasColumnType("int");

                    b.Property<int>("CourseFK")
                        .HasColumnType("int");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("AdvisorFK");

                    b.HasIndex("CourseFK");

                    b.ToTable("CourseAdvisors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AdvisorFK = 1,
                            CourseFK = 10,
                            IsAdmin = false
                        },
                        new
                        {
                            Id = 2,
                            AdvisorFK = 1,
                            CourseFK = 11,
                            IsAdmin = false
                        },
                        new
                        {
                            Id = 3,
                            AdvisorFK = 1,
                            CourseFK = 30,
                            IsAdmin = true
                        },
                        new
                        {
                            Id = 4,
                            AdvisorFK = 2,
                            CourseFK = 10,
                            IsAdmin = false
                        },
                        new
                        {
                            Id = 5,
                            AdvisorFK = 2,
                            CourseFK = 11,
                            IsAdmin = false
                        },
                        new
                        {
                            Id = 6,
                            AdvisorFK = 3,
                            CourseFK = 11,
                            IsAdmin = false
                        },
                        new
                        {
                            Id = 7,
                            AdvisorFK = 4,
                            CourseFK = 11,
                            IsAdmin = false
                        },
                        new
                        {
                            Id = 8,
                            AdvisorFK = 5,
                            CourseFK = 11,
                            IsAdmin = false
                        },
                        new
                        {
                            Id = 9,
                            AdvisorFK = 6,
                            CourseFK = 10,
                            IsAdmin = false
                        },
                        new
                        {
                            Id = 10,
                            AdvisorFK = 6,
                            CourseFK = 11,
                            IsAdmin = false
                        },
                        new
                        {
                            Id = 11,
                            AdvisorFK = 6,
                            CourseFK = 13,
                            IsAdmin = false
                        },
                        new
                        {
                            Id = 12,
                            AdvisorFK = 6,
                            CourseFK = 20,
                            IsAdmin = false
                        },
                        new
                        {
                            Id = 13,
                            AdvisorFK = 7,
                            CourseFK = 11,
                            IsAdmin = false
                        },
                        new
                        {
                            Id = 14,
                            AdvisorFK = 7,
                            CourseFK = 12,
                            IsAdmin = false
                        },
                        new
                        {
                            Id = 15,
                            AdvisorFK = 7,
                            CourseFK = 29,
                            IsAdmin = false
                        },
                        new
                        {
                            Id = 16,
                            AdvisorFK = 8,
                            CourseFK = 30,
                            IsAdmin = false
                        },
                        new
                        {
                            Id = 17,
                            AdvisorFK = 9,
                            CourseFK = 11,
                            IsAdmin = true
                        },
                        new
                        {
                            Id = 18,
                            AdvisorFK = 9,
                            CourseFK = 30,
                            IsAdmin = false
                        },
                        new
                        {
                            Id = 19,
                            AdvisorFK = 10,
                            CourseFK = 10,
                            IsAdmin = false
                        },
                        new
                        {
                            Id = 20,
                            AdvisorFK = 10,
                            CourseFK = 11,
                            IsAdmin = false
                        },
                        new
                        {
                            Id = 21,
                            AdvisorFK = 10,
                            CourseFK = 29,
                            IsAdmin = false
                        },
                        new
                        {
                            Id = 22,
                            AdvisorFK = 11,
                            CourseFK = 10,
                            IsAdmin = false
                        },
                        new
                        {
                            Id = 23,
                            AdvisorFK = 11,
                            CourseFK = 29,
                            IsAdmin = false
                        },
                        new
                        {
                            Id = 24,
                            AdvisorFK = 11,
                            CourseFK = 30,
                            IsAdmin = false
                        },
                        new
                        {
                            Id = 25,
                            AdvisorFK = 12,
                            CourseFK = 30,
                            IsAdmin = false
                        });
                });

            modelBuilder.Entity("wlc2.Models.Enrollment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CourseFK")
                        .HasColumnType("int");

                    b.Property<int>("ECTS")
                        .HasColumnType("int");

                    b.Property<int>("EnrollmentCompletedFK")
                        .HasColumnType("int");

                    b.Property<int>("EnrollmentStartedFK")
                        .HasColumnType("int");

                    b.Property<int>("EnrollmentStatus")
                        .HasColumnType("int");

                    b.Property<int>("StudentFK")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CourseFK");

                    b.HasIndex("EnrollmentCompletedFK");

                    b.HasIndex("EnrollmentStartedFK");

                    b.HasIndex("StudentFK");

                    b.ToTable("Enrollments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CourseFK = 11,
                            ECTS = 162,
                            EnrollmentCompletedFK = 3,
                            EnrollmentStartedFK = 3,
                            EnrollmentStatus = 0,
                            StudentFK = 13
                        },
                        new
                        {
                            Id = 2,
                            CourseFK = 11,
                            ECTS = 156,
                            EnrollmentCompletedFK = 3,
                            EnrollmentStartedFK = 3,
                            EnrollmentStatus = 0,
                            StudentFK = 14
                        },
                        new
                        {
                            Id = 3,
                            CourseFK = 11,
                            ECTS = 162,
                            EnrollmentCompletedFK = 3,
                            EnrollmentStartedFK = 3,
                            EnrollmentStatus = 0,
                            StudentFK = 15
                        },
                        new
                        {
                            Id = 4,
                            CourseFK = 11,
                            ECTS = 116,
                            EnrollmentCompletedFK = 3,
                            EnrollmentStartedFK = 3,
                            EnrollmentStatus = 0,
                            StudentFK = 16
                        },
                        new
                        {
                            Id = 5,
                            CourseFK = 11,
                            ECTS = 168,
                            EnrollmentCompletedFK = 3,
                            EnrollmentStartedFK = 3,
                            EnrollmentStatus = 0,
                            StudentFK = 17
                        });
                });

            modelBuilder.Entity("wlc2.Models.IdentificationType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("IdentificationTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "1",
                            Name = "Cartão de Cidadão ou Bilhete de Identidade Nacional"
                        },
                        new
                        {
                            Id = 2,
                            Code = "2",
                            Name = "Passaporte"
                        },
                        new
                        {
                            Id = 3,
                            Code = "3",
                            Name = "Autorização de Residência"
                        },
                        new
                        {
                            Id = 4,
                            Code = "4",
                            Name = "Bilhete de Identidade Estrangeiro"
                        },
                        new
                        {
                            Id = 5,
                            Code = "7",
                            Name = "Certificado de Registo de Cidadão da União Europeia"
                        },
                        new
                        {
                            Id = 6,
                            Code = "8",
                            Name = "Cartão de Residência Permanente de Cidadão da União Europeia"
                        },
                        new
                        {
                            Id = 7,
                            Code = "9",
                            Name = "Outro"
                        });
                });

            modelBuilder.Entity("wlc2.Models.Institution", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Site")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Institutions");
                });

            modelBuilder.Entity("wlc2.Models.JuryMember", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AdvisorFK")
                        .HasColumnType("int");

                    b.Property<int>("JuryMemberRole")
                        .HasColumnType("int");

                    b.Property<int>("ProjectDefenseFK")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AdvisorFK");

                    b.HasIndex("ProjectDefenseFK");

                    b.ToTable("JuryMembers");
                });

            modelBuilder.Entity("wlc2.Models.Language", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Alpha2Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Languages");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Alpha2Code = "por",
                            Name = "Português"
                        },
                        new
                        {
                            Id = 2,
                            Alpha2Code = "eng",
                            Name = "Inglês"
                        },
                        new
                        {
                            Id = 3,
                            Alpha2Code = "spa",
                            Name = "Espanhol"
                        },
                        new
                        {
                            Id = 4,
                            Alpha2Code = "deu",
                            Name = "Alemão"
                        },
                        new
                        {
                            Id = 5,
                            Alpha2Code = "fra",
                            Name = "Francês"
                        },
                        new
                        {
                            Id = 6,
                            Alpha2Code = "ita",
                            Name = "Italiano"
                        },
                        new
                        {
                            Id = 7,
                            Alpha2Code = "mwl",
                            Name = "Mirandês"
                        },
                        new
                        {
                            Id = 8,
                            Alpha2Code = "jpn",
                            Name = "Japonês"
                        },
                        new
                        {
                            Id = 9,
                            Alpha2Code = "cmn",
                            Name = "Chinês"
                        },
                        new
                        {
                            Id = 10,
                            Alpha2Code = "other",
                            Name = "Outro"
                        },
                        new
                        {
                            Id = 11,
                            Alpha2Code = "N/A",
                            Name = "N/A"
                        });
                });

            modelBuilder.Entity("wlc2.Models.License", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RcaapCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Licenses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Sem Licença",
                            RcaapCode = "N/A"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Atribuição (CC-BY)",
                            RcaapCode = "http://creativecommons.org/licenses/by/4.0/"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Atribuição, Sem Trabalhos Derivados (CC-BY-ND)",
                            RcaapCode = "http://creativecommons.org/licenses/by-nd/4.0/"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Atribuição, Partilha nos Termos da Mesma Licença (CC-BY-SA)",
                            RcaapCode = "http://creativecommons.org/licenses/by-sa/4.0/"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Atribuição, Uso Não Comercial (CC-BY-NC)",
                            RcaapCode = "http://creativecommons.org/licenses/by-nc/4.0/"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Atribuição, Não Comercial, Sem Derivações (CC-BY-NC-ND)",
                            RcaapCode = "http://creativecommons.org/licenses/by-nc-nd/4.0/"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Atribuição, Uso Não Comercial, Partilha nos Termos da Mesma Licença (CC-BY-NC-SA)",
                            RcaapCode = "http://creativecommons.org/licenses/by-nc-sa/4.0/"
                        });
                });

            modelBuilder.Entity("wlc2.Models.Nationality", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Alpha2Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Nationalities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Alpha2Code = "AF",
                            Name = "Afeganistão"
                        },
                        new
                        {
                            Id = 2,
                            Alpha2Code = "ZA",
                            Name = "África do Sul"
                        },
                        new
                        {
                            Id = 3,
                            Alpha2Code = "AL",
                            Name = "Albânia"
                        },
                        new
                        {
                            Id = 4,
                            Alpha2Code = "DE",
                            Name = "Alemanha"
                        },
                        new
                        {
                            Id = 5,
                            Alpha2Code = "AD",
                            Name = "Andorra"
                        },
                        new
                        {
                            Id = 6,
                            Alpha2Code = "AO",
                            Name = "Angola"
                        },
                        new
                        {
                            Id = 7,
                            Alpha2Code = "AI",
                            Name = "Anguila"
                        },
                        new
                        {
                            Id = 8,
                            Alpha2Code = "AQ",
                            Name = "Antárctica"
                        },
                        new
                        {
                            Id = 9,
                            Alpha2Code = "AG",
                            Name = "Antígua e Barbuda"
                        },
                        new
                        {
                            Id = 10,
                            Alpha2Code = "AN",
                            Name = "Antilhas Holandesas"
                        },
                        new
                        {
                            Id = 11,
                            Alpha2Code = "SA",
                            Name = "Arábia Saudita"
                        },
                        new
                        {
                            Id = 12,
                            Alpha2Code = "DZ",
                            Name = "Argélia"
                        },
                        new
                        {
                            Id = 13,
                            Alpha2Code = "AR",
                            Name = "Argentina"
                        },
                        new
                        {
                            Id = 14,
                            Alpha2Code = "AM",
                            Name = "Arménia"
                        },
                        new
                        {
                            Id = 15,
                            Alpha2Code = "AW",
                            Name = "Aruba"
                        },
                        new
                        {
                            Id = 16,
                            Alpha2Code = "AU",
                            Name = "Austrália"
                        },
                        new
                        {
                            Id = 17,
                            Alpha2Code = "AT",
                            Name = "Áustria"
                        },
                        new
                        {
                            Id = 18,
                            Alpha2Code = "AZ",
                            Name = "Azerbaijão"
                        },
                        new
                        {
                            Id = 19,
                            Alpha2Code = "BS",
                            Name = "Bahamas"
                        },
                        new
                        {
                            Id = 20,
                            Alpha2Code = "BD",
                            Name = "Bangladesh"
                        },
                        new
                        {
                            Id = 21,
                            Alpha2Code = "BB",
                            Name = "Barbados"
                        },
                        new
                        {
                            Id = 22,
                            Alpha2Code = "BH",
                            Name = "Barém"
                        },
                        new
                        {
                            Id = 23,
                            Alpha2Code = "BE",
                            Name = "Bélgica"
                        },
                        new
                        {
                            Id = 24,
                            Alpha2Code = "BZ",
                            Name = "Belize"
                        },
                        new
                        {
                            Id = 25,
                            Alpha2Code = "BJ",
                            Name = "Benim"
                        },
                        new
                        {
                            Id = 26,
                            Alpha2Code = "BM",
                            Name = "Bermudas"
                        },
                        new
                        {
                            Id = 27,
                            Alpha2Code = "BY",
                            Name = "Bielorrússia"
                        },
                        new
                        {
                            Id = 28,
                            Alpha2Code = "BO",
                            Name = "Bolívia, Estado Plurinacional da"
                        },
                        new
                        {
                            Id = 29,
                            Alpha2Code = "BQ",
                            Name = "Bonaire, Santo Eustáquio e Saba"
                        },
                        new
                        {
                            Id = 30,
                            Alpha2Code = "BA",
                            Name = "Bósnia-Herzegovina"
                        },
                        new
                        {
                            Id = 31,
                            Alpha2Code = "BW",
                            Name = "Botswana"
                        },
                        new
                        {
                            Id = 32,
                            Alpha2Code = "BR",
                            Name = "Brasil"
                        },
                        new
                        {
                            Id = 33,
                            Alpha2Code = "BN",
                            Name = "Brunei Darussalam"
                        },
                        new
                        {
                            Id = 34,
                            Alpha2Code = "BG",
                            Name = "Bulgária"
                        },
                        new
                        {
                            Id = 35,
                            Alpha2Code = "BF",
                            Name = "Burkina Faso"
                        },
                        new
                        {
                            Id = 36,
                            Alpha2Code = "BI",
                            Name = "Burundi"
                        },
                        new
                        {
                            Id = 37,
                            Alpha2Code = "BT",
                            Name = "Butão"
                        },
                        new
                        {
                            Id = 38,
                            Alpha2Code = "CV",
                            Name = "Cabo Verde"
                        },
                        new
                        {
                            Id = 39,
                            Alpha2Code = "CM",
                            Name = "Camarões"
                        },
                        new
                        {
                            Id = 40,
                            Alpha2Code = "KH",
                            Name = "Camboja"
                        },
                        new
                        {
                            Id = 41,
                            Alpha2Code = "CA",
                            Name = "Canadá"
                        },
                        new
                        {
                            Id = 42,
                            Alpha2Code = "QA",
                            Name = "Catar"
                        },
                        new
                        {
                            Id = 43,
                            Alpha2Code = "KZ",
                            Name = "Cazaquistão"
                        },
                        new
                        {
                            Id = 44,
                            Alpha2Code = "CF",
                            Name = "Centro-Africana (República)"
                        },
                        new
                        {
                            Id = 45,
                            Alpha2Code = "TD",
                            Name = "Chade"
                        },
                        new
                        {
                            Id = 46,
                            Alpha2Code = "CL",
                            Name = "Chile"
                        },
                        new
                        {
                            Id = 47,
                            Alpha2Code = "CN",
                            Name = "China"
                        },
                        new
                        {
                            Id = 48,
                            Alpha2Code = "CY",
                            Name = "Chipre"
                        },
                        new
                        {
                            Id = 49,
                            Alpha2Code = "CO",
                            Name = "Colômbia"
                        },
                        new
                        {
                            Id = 50,
                            Alpha2Code = "KM",
                            Name = "Comores"
                        },
                        new
                        {
                            Id = 51,
                            Alpha2Code = "CG",
                            Name = "Congo"
                        },
                        new
                        {
                            Id = 52,
                            Alpha2Code = "CD",
                            Name = "Congo (República Democrática do)"
                        },
                        new
                        {
                            Id = 53,
                            Alpha2Code = "KR",
                            Name = "Coreia (República da)"
                        },
                        new
                        {
                            Id = 54,
                            Alpha2Code = "KP",
                            Name = "Coreia (República Popular Democrática da)"
                        },
                        new
                        {
                            Id = 55,
                            Alpha2Code = "CI",
                            Name = "Costa do Marfim"
                        },
                        new
                        {
                            Id = 56,
                            Alpha2Code = "CR",
                            Name = "Costa Rica"
                        },
                        new
                        {
                            Id = 57,
                            Alpha2Code = "HR",
                            Name = "Croácia"
                        },
                        new
                        {
                            Id = 58,
                            Alpha2Code = "CU",
                            Name = "Cuba"
                        },
                        new
                        {
                            Id = 59,
                            Alpha2Code = "CW",
                            Name = "Curaçau"
                        },
                        new
                        {
                            Id = 60,
                            Alpha2Code = "DK",
                            Name = "Dinamarca"
                        },
                        new
                        {
                            Id = 61,
                            Alpha2Code = "DM",
                            Name = "Domínica"
                        },
                        new
                        {
                            Id = 62,
                            Alpha2Code = "EG",
                            Name = "Egipto"
                        },
                        new
                        {
                            Id = 63,
                            Alpha2Code = "SV",
                            Name = "El Salvador"
                        },
                        new
                        {
                            Id = 64,
                            Alpha2Code = "AE",
                            Name = "Emiratos Árabes Unidos"
                        },
                        new
                        {
                            Id = 65,
                            Alpha2Code = "EC",
                            Name = "Equador"
                        },
                        new
                        {
                            Id = 66,
                            Alpha2Code = "ER",
                            Name = "Eritreia"
                        },
                        new
                        {
                            Id = 67,
                            Alpha2Code = "SK",
                            Name = "Eslováquia"
                        },
                        new
                        {
                            Id = 68,
                            Alpha2Code = "SI",
                            Name = "Eslovénia"
                        },
                        new
                        {
                            Id = 69,
                            Alpha2Code = "ES",
                            Name = "Espanha"
                        },
                        new
                        {
                            Id = 70,
                            Alpha2Code = "US",
                            Name = "Estados Unidos"
                        },
                        new
                        {
                            Id = 71,
                            Alpha2Code = "EE",
                            Name = "Estónia"
                        },
                        new
                        {
                            Id = 72,
                            Alpha2Code = "ET",
                            Name = "Etiópia"
                        },
                        new
                        {
                            Id = 73,
                            Alpha2Code = "PH",
                            Name = "Filipinas"
                        },
                        new
                        {
                            Id = 74,
                            Alpha2Code = "FI",
                            Name = "Finlândia"
                        },
                        new
                        {
                            Id = 75,
                            Alpha2Code = "FR",
                            Name = "França"
                        },
                        new
                        {
                            Id = 76,
                            Alpha2Code = "GA",
                            Name = "Gabão"
                        },
                        new
                        {
                            Id = 77,
                            Alpha2Code = "GM",
                            Name = "Gâmbia"
                        },
                        new
                        {
                            Id = 78,
                            Alpha2Code = "GH",
                            Name = "Gana"
                        },
                        new
                        {
                            Id = 79,
                            Alpha2Code = "GE",
                            Name = "Geórgia"
                        },
                        new
                        {
                            Id = 80,
                            Alpha2Code = "GS",
                            Name = "Geórgia do Sul e Ilhas Sandwich"
                        },
                        new
                        {
                            Id = 81,
                            Alpha2Code = "GI",
                            Name = "Gibraltar"
                        },
                        new
                        {
                            Id = 82,
                            Alpha2Code = "GD",
                            Name = "Granada"
                        },
                        new
                        {
                            Id = 83,
                            Alpha2Code = "GR",
                            Name = "Grécia"
                        },
                        new
                        {
                            Id = 84,
                            Alpha2Code = "GL",
                            Name = "Gronelândia"
                        },
                        new
                        {
                            Id = 85,
                            Alpha2Code = "GP",
                            Name = "Guadalupe"
                        },
                        new
                        {
                            Id = 86,
                            Alpha2Code = "GU",
                            Name = "Guam"
                        },
                        new
                        {
                            Id = 87,
                            Alpha2Code = "GT",
                            Name = "Guatemala"
                        },
                        new
                        {
                            Id = 88,
                            Alpha2Code = "GG",
                            Name = "Guernsey"
                        },
                        new
                        {
                            Id = 89,
                            Alpha2Code = "GY",
                            Name = "Guiana"
                        },
                        new
                        {
                            Id = 90,
                            Alpha2Code = "GF",
                            Name = "Guiana Francesa"
                        },
                        new
                        {
                            Id = 91,
                            Alpha2Code = "GN",
                            Name = "Guiné"
                        },
                        new
                        {
                            Id = 92,
                            Alpha2Code = "GQ",
                            Name = "Guiné Equatorial"
                        },
                        new
                        {
                            Id = 93,
                            Alpha2Code = "GW",
                            Name = "Guiné-Bissau"
                        },
                        new
                        {
                            Id = 94,
                            Alpha2Code = "HT",
                            Name = "Haiti"
                        },
                        new
                        {
                            Id = 95,
                            Alpha2Code = "HN",
                            Name = "Honduras"
                        },
                        new
                        {
                            Id = 96,
                            Alpha2Code = "HK",
                            Name = "Hong Kong"
                        },
                        new
                        {
                            Id = 97,
                            Alpha2Code = "HU",
                            Name = "Hungria"
                        },
                        new
                        {
                            Id = 98,
                            Alpha2Code = "YE",
                            Name = "Iémen"
                        },
                        new
                        {
                            Id = 99,
                            Alpha2Code = "BV",
                            Name = "Ilha Bouvet"
                        },
                        new
                        {
                            Id = 100,
                            Alpha2Code = "CX",
                            Name = "Ilha Christmas"
                        },
                        new
                        {
                            Id = 101,
                            Alpha2Code = "IM",
                            Name = "Ilha de Man"
                        },
                        new
                        {
                            Id = 102,
                            Alpha2Code = "HM",
                            Name = "Ilha Heard e Ilhas McDonald"
                        },
                        new
                        {
                            Id = 103,
                            Alpha2Code = "NF",
                            Name = "Ilha Norfolk"
                        },
                        new
                        {
                            Id = 104,
                            Alpha2Code = "AX",
                            Name = "Ilhas Aland"
                        },
                        new
                        {
                            Id = 105,
                            Alpha2Code = "KY",
                            Name = "Ilhas Caimão"
                        },
                        new
                        {
                            Id = 106,
                            Alpha2Code = "CC",
                            Name = "Ilhas Cocos (Keeling)"
                        },
                        new
                        {
                            Id = 107,
                            Alpha2Code = "CK",
                            Name = "Ilhas Cook"
                        },
                        new
                        {
                            Id = 108,
                            Alpha2Code = "FK",
                            Name = "Ilhas Falkland (Malvinas)"
                        },
                        new
                        {
                            Id = 109,
                            Alpha2Code = "FO",
                            Name = "Ilhas Faroé"
                        },
                        new
                        {
                            Id = 110,
                            Alpha2Code = "FJ",
                            Name = "Ilhas Fiji"
                        },
                        new
                        {
                            Id = 111,
                            Alpha2Code = "MP",
                            Name = "Ilhas Marianas do Norte"
                        },
                        new
                        {
                            Id = 112,
                            Alpha2Code = "MH",
                            Name = "Ilhas Marshall"
                        },
                        new
                        {
                            Id = 113,
                            Alpha2Code = "UM",
                            Name = "Ilhas Menores Distantes dos Estados Unidos"
                        },
                        new
                        {
                            Id = 114,
                            Alpha2Code = "SB",
                            Name = "Ilhas Salomão"
                        },
                        new
                        {
                            Id = 115,
                            Alpha2Code = "TC",
                            Name = "Ilhas Turcas e Caicos"
                        },
                        new
                        {
                            Id = 116,
                            Alpha2Code = "VG",
                            Name = "Ilhas Virgens (Britânicas)"
                        },
                        new
                        {
                            Id = 117,
                            Alpha2Code = "VI",
                            Name = "Ilhas Virgens (Estados Unidos)"
                        },
                        new
                        {
                            Id = 118,
                            Alpha2Code = "IN",
                            Name = "Índia"
                        },
                        new
                        {
                            Id = 119,
                            Alpha2Code = "ID",
                            Name = "Indonésia"
                        },
                        new
                        {
                            Id = 120,
                            Alpha2Code = "IR",
                            Name = "Irão (República Islâmica)"
                        },
                        new
                        {
                            Id = 121,
                            Alpha2Code = "IQ",
                            Name = "Iraque"
                        },
                        new
                        {
                            Id = 122,
                            Alpha2Code = "IE",
                            Name = "Irlanda"
                        },
                        new
                        {
                            Id = 123,
                            Alpha2Code = "IS",
                            Name = "Islândia"
                        },
                        new
                        {
                            Id = 124,
                            Alpha2Code = "IL",
                            Name = "Israel"
                        },
                        new
                        {
                            Id = 125,
                            Alpha2Code = "IT",
                            Name = "Itália"
                        },
                        new
                        {
                            Id = 126,
                            Alpha2Code = "JM",
                            Name = "Jamaica"
                        },
                        new
                        {
                            Id = 127,
                            Alpha2Code = "JP",
                            Name = "Japão"
                        },
                        new
                        {
                            Id = 128,
                            Alpha2Code = "JE",
                            Name = "Jersey"
                        },
                        new
                        {
                            Id = 129,
                            Alpha2Code = "DJ",
                            Name = "Jibuti"
                        },
                        new
                        {
                            Id = 130,
                            Alpha2Code = "JO",
                            Name = "Jordânia"
                        },
                        new
                        {
                            Id = 131,
                            Alpha2Code = "YU",
                            Name = "Jugoslávia (extinto)"
                        },
                        new
                        {
                            Id = 132,
                            Alpha2Code = "KI",
                            Name = "Kiribati"
                        },
                        new
                        {
                            Id = 133,
                            Alpha2Code = "XK",
                            Name = "Kosovo"
                        },
                        new
                        {
                            Id = 134,
                            Alpha2Code = "KW",
                            Name = "Kuwait"
                        },
                        new
                        {
                            Id = 135,
                            Alpha2Code = "LA",
                            Name = "Laos (República Popular Democrática do)"
                        },
                        new
                        {
                            Id = 136,
                            Alpha2Code = "LS",
                            Name = "Lesoto"
                        },
                        new
                        {
                            Id = 137,
                            Alpha2Code = "LV",
                            Name = "Letónia"
                        },
                        new
                        {
                            Id = 138,
                            Alpha2Code = "LB",
                            Name = "Líbano"
                        },
                        new
                        {
                            Id = 139,
                            Alpha2Code = "LR",
                            Name = "Libéria"
                        },
                        new
                        {
                            Id = 140,
                            Alpha2Code = "LY",
                            Name = "Líbia"
                        },
                        new
                        {
                            Id = 141,
                            Alpha2Code = "LI",
                            Name = "Liechtenstein"
                        },
                        new
                        {
                            Id = 142,
                            Alpha2Code = "LT",
                            Name = "Lituânia"
                        },
                        new
                        {
                            Id = 143,
                            Alpha2Code = "LU",
                            Name = "Luxemburgo"
                        },
                        new
                        {
                            Id = 144,
                            Alpha2Code = "MO",
                            Name = "Macau"
                        },
                        new
                        {
                            Id = 145,
                            Alpha2Code = "MK",
                            Name = "Macedónia (antiga República Jugoslava da)"
                        },
                        new
                        {
                            Id = 146,
                            Alpha2Code = "MG",
                            Name = "Madagáscar"
                        },
                        new
                        {
                            Id = 147,
                            Alpha2Code = "MY",
                            Name = "Malásia"
                        },
                        new
                        {
                            Id = 148,
                            Alpha2Code = "MW",
                            Name = "Malawi"
                        },
                        new
                        {
                            Id = 149,
                            Alpha2Code = "MV",
                            Name = "Maldivas"
                        },
                        new
                        {
                            Id = 150,
                            Alpha2Code = "ML",
                            Name = "Mali"
                        },
                        new
                        {
                            Id = 151,
                            Alpha2Code = "MT",
                            Name = "Malta"
                        },
                        new
                        {
                            Id = 152,
                            Alpha2Code = "MA",
                            Name = "Marrocos"
                        },
                        new
                        {
                            Id = 153,
                            Alpha2Code = "MQ",
                            Name = "Martinica"
                        },
                        new
                        {
                            Id = 154,
                            Alpha2Code = "MU",
                            Name = "Maurícias"
                        },
                        new
                        {
                            Id = 155,
                            Alpha2Code = "MR",
                            Name = "Mauritânia"
                        },
                        new
                        {
                            Id = 156,
                            Alpha2Code = "YT",
                            Name = "Mayotte"
                        },
                        new
                        {
                            Id = 157,
                            Alpha2Code = "MX",
                            Name = "México"
                        },
                        new
                        {
                            Id = 158,
                            Alpha2Code = "FM",
                            Name = "Micronésia (Estados Federados da)"
                        },
                        new
                        {
                            Id = 159,
                            Alpha2Code = "MZ",
                            Name = "Moçambique"
                        },
                        new
                        {
                            Id = 160,
                            Alpha2Code = "MD",
                            Name = "Moldova, República de"
                        },
                        new
                        {
                            Id = 161,
                            Alpha2Code = "MC",
                            Name = "Mónaco"
                        },
                        new
                        {
                            Id = 162,
                            Alpha2Code = "MN",
                            Name = "Mongólia"
                        },
                        new
                        {
                            Id = 163,
                            Alpha2Code = "MS",
                            Name = "Monserrate"
                        },
                        new
                        {
                            Id = 164,
                            Alpha2Code = "ME",
                            Name = "Montenegro"
                        },
                        new
                        {
                            Id = 165,
                            Alpha2Code = "MM",
                            Name = "Myanmar"
                        },
                        new
                        {
                            Id = 166,
                            Alpha2Code = "NA",
                            Name = "Namíbia"
                        },
                        new
                        {
                            Id = 167,
                            Alpha2Code = "NR",
                            Name = "Nauru"
                        },
                        new
                        {
                            Id = 168,
                            Alpha2Code = "NP",
                            Name = "Nepal"
                        },
                        new
                        {
                            Id = 169,
                            Alpha2Code = "NI",
                            Name = "Nicarágua"
                        },
                        new
                        {
                            Id = 170,
                            Alpha2Code = "NE",
                            Name = "Niger"
                        },
                        new
                        {
                            Id = 171,
                            Alpha2Code = "NG",
                            Name = "Nigéria"
                        },
                        new
                        {
                            Id = 172,
                            Alpha2Code = "NU",
                            Name = "Niue"
                        },
                        new
                        {
                            Id = 173,
                            Alpha2Code = "NO",
                            Name = "Noruega"
                        },
                        new
                        {
                            Id = 174,
                            Alpha2Code = "NC",
                            Name = "Nova Caledónia"
                        },
                        new
                        {
                            Id = 175,
                            Alpha2Code = "NZ",
                            Name = "Nova Zelândia"
                        },
                        new
                        {
                            Id = 176,
                            Alpha2Code = "OM",
                            Name = "Omã"
                        },
                        new
                        {
                            Id = 177,
                            Alpha2Code = "NL",
                            Name = "Países Baixos"
                        },
                        new
                        {
                            Id = 178,
                            Alpha2Code = "PW",
                            Name = "Palau"
                        },
                        new
                        {
                            Id = 179,
                            Alpha2Code = "PA",
                            Name = "Panamá"
                        },
                        new
                        {
                            Id = 180,
                            Alpha2Code = "PG",
                            Name = "Papuásia-Nova Guiné"
                        },
                        new
                        {
                            Id = 181,
                            Alpha2Code = "PK",
                            Name = "Paquistão"
                        },
                        new
                        {
                            Id = 182,
                            Alpha2Code = "PY",
                            Name = "Paraguai"
                        },
                        new
                        {
                            Id = 183,
                            Alpha2Code = "PE",
                            Name = "Peru"
                        },
                        new
                        {
                            Id = 184,
                            Alpha2Code = "PN",
                            Name = "Pitcairn"
                        },
                        new
                        {
                            Id = 185,
                            Alpha2Code = "PF",
                            Name = "Polinésia Francesa"
                        },
                        new
                        {
                            Id = 186,
                            Alpha2Code = "PL",
                            Name = "Polónia"
                        },
                        new
                        {
                            Id = 187,
                            Alpha2Code = "PR",
                            Name = "Porto Rico"
                        },
                        new
                        {
                            Id = 188,
                            Alpha2Code = "PT",
                            Name = "Portugal"
                        },
                        new
                        {
                            Id = 189,
                            Alpha2Code = "KE",
                            Name = "Quénia"
                        },
                        new
                        {
                            Id = 190,
                            Alpha2Code = "KG",
                            Name = "Quirguizistão"
                        },
                        new
                        {
                            Id = 191,
                            Alpha2Code = "GB",
                            Name = "Reino Unido"
                        },
                        new
                        {
                            Id = 192,
                            Alpha2Code = "CZ",
                            Name = "República Checa"
                        },
                        new
                        {
                            Id = 193,
                            Alpha2Code = "DO",
                            Name = "República Dominicana"
                        },
                        new
                        {
                            Id = 194,
                            Alpha2Code = "RE",
                            Name = "Reunião"
                        },
                        new
                        {
                            Id = 195,
                            Alpha2Code = "RO",
                            Name = "Roménia"
                        },
                        new
                        {
                            Id = 196,
                            Alpha2Code = "RW",
                            Name = "Ruanda"
                        },
                        new
                        {
                            Id = 197,
                            Alpha2Code = "RU",
                            Name = "Rússia (Federação da)"
                        },
                        new
                        {
                            Id = 198,
                            Alpha2Code = "WS",
                            Name = "Samoa"
                        },
                        new
                        {
                            Id = 199,
                            Alpha2Code = "AS",
                            Name = "Samoa Americana"
                        },
                        new
                        {
                            Id = 200,
                            Alpha2Code = "SH",
                            Name = "Santa Helena, Ascensão e Tristão da Cunha"
                        },
                        new
                        {
                            Id = 201,
                            Alpha2Code = "LC",
                            Name = "Santa Lúcia"
                        },
                        new
                        {
                            Id = 202,
                            Alpha2Code = "VA",
                            Name = "Santa Sé (Cidade Estado do Vaticano)"
                        },
                        new
                        {
                            Id = 203,
                            Alpha2Code = "BL",
                            Name = "São Bartolomeu"
                        },
                        new
                        {
                            Id = 204,
                            Alpha2Code = "KN",
                            Name = "São Cristóvão e Nevis"
                        },
                        new
                        {
                            Id = 205,
                            Alpha2Code = "SM",
                            Name = "São Marino"
                        },
                        new
                        {
                            Id = 206,
                            Alpha2Code = "MF",
                            Name = "São Martinho (parte francesa)"
                        },
                        new
                        {
                            Id = 207,
                            Alpha2Code = "SX",
                            Name = "São Martinho (parte holandesa)"
                        },
                        new
                        {
                            Id = 208,
                            Alpha2Code = "PM",
                            Name = "São Pedro e Miquelon"
                        },
                        new
                        {
                            Id = 209,
                            Alpha2Code = "ST",
                            Name = "São Tomé e Príncipe"
                        },
                        new
                        {
                            Id = 210,
                            Alpha2Code = "VC",
                            Name = "São Vicente e Granadinas"
                        },
                        new
                        {
                            Id = 211,
                            Alpha2Code = "EH",
                            Name = "Sara Ocidental"
                        },
                        new
                        {
                            Id = 212,
                            Alpha2Code = "SN",
                            Name = "Senegal"
                        },
                        new
                        {
                            Id = 213,
                            Alpha2Code = "SL",
                            Name = "Serra Leoa"
                        },
                        new
                        {
                            Id = 214,
                            Alpha2Code = "RS",
                            Name = "Sérvia"
                        },
                        new
                        {
                            Id = 215,
                            Alpha2Code = "CS",
                            Name = "Sérvia e Montenegro (extinto)"
                        },
                        new
                        {
                            Id = 216,
                            Alpha2Code = "SC",
                            Name = "Seychelles"
                        },
                        new
                        {
                            Id = 217,
                            Alpha2Code = "SG",
                            Name = "Singapura"
                        },
                        new
                        {
                            Id = 218,
                            Alpha2Code = "SY",
                            Name = "Síria (República Árabe da)"
                        },
                        new
                        {
                            Id = 219,
                            Alpha2Code = "SO",
                            Name = "Somália"
                        },
                        new
                        {
                            Id = 220,
                            Alpha2Code = "LK",
                            Name = "Sri Lanka"
                        },
                        new
                        {
                            Id = 221,
                            Alpha2Code = "SZ",
                            Name = "Suazilândia"
                        },
                        new
                        {
                            Id = 222,
                            Alpha2Code = "SD",
                            Name = "Sudão"
                        },
                        new
                        {
                            Id = 223,
                            Alpha2Code = "SS",
                            Name = "Sudão do Sul"
                        },
                        new
                        {
                            Id = 224,
                            Alpha2Code = "SE",
                            Name = "Suécia"
                        },
                        new
                        {
                            Id = 225,
                            Alpha2Code = "CH",
                            Name = "Suíça"
                        },
                        new
                        {
                            Id = 226,
                            Alpha2Code = "SR",
                            Name = "Suriname"
                        },
                        new
                        {
                            Id = 227,
                            Alpha2Code = "SJ",
                            Name = "Svalbard e a Ilha de Jan Mayen"
                        },
                        new
                        {
                            Id = 228,
                            Alpha2Code = "TH",
                            Name = "Tailândia"
                        },
                        new
                        {
                            Id = 229,
                            Alpha2Code = "TW",
                            Name = "Taiwan (Província da China)"
                        },
                        new
                        {
                            Id = 230,
                            Alpha2Code = "TJ",
                            Name = "Tajiquistão"
                        },
                        new
                        {
                            Id = 231,
                            Alpha2Code = "TZ",
                            Name = "Tanzânia, República Unida da"
                        },
                        new
                        {
                            Id = 232,
                            Alpha2Code = "IO",
                            Name = "Território Britânico do Oceano Índico"
                        },
                        new
                        {
                            Id = 233,
                            Alpha2Code = "PS",
                            Name = "Território Palestiniano Ocupado"
                        },
                        new
                        {
                            Id = 234,
                            Alpha2Code = "TF",
                            Name = "Territórios Franceses do Sul"
                        },
                        new
                        {
                            Id = 235,
                            Alpha2Code = "TL",
                            Name = "Timor Leste"
                        },
                        new
                        {
                            Id = 236,
                            Alpha2Code = "TG",
                            Name = "Togo"
                        },
                        new
                        {
                            Id = 237,
                            Alpha2Code = "TK",
                            Name = "Tokelau"
                        },
                        new
                        {
                            Id = 238,
                            Alpha2Code = "TO",
                            Name = "Tonga"
                        },
                        new
                        {
                            Id = 239,
                            Alpha2Code = "TT",
                            Name = "Trindade e Tobago"
                        },
                        new
                        {
                            Id = 240,
                            Alpha2Code = "TN",
                            Name = "Tunísia"
                        },
                        new
                        {
                            Id = 241,
                            Alpha2Code = "TM",
                            Name = "Turquemenistão"
                        },
                        new
                        {
                            Id = 242,
                            Alpha2Code = "TR",
                            Name = "Turquia"
                        },
                        new
                        {
                            Id = 243,
                            Alpha2Code = "TV",
                            Name = "Tuvalu"
                        },
                        new
                        {
                            Id = 244,
                            Alpha2Code = "UA",
                            Name = "Ucrânia"
                        },
                        new
                        {
                            Id = 245,
                            Alpha2Code = "UG",
                            Name = "Uganda"
                        },
                        new
                        {
                            Id = 246,
                            Alpha2Code = "UY",
                            Name = "Uruguai"
                        },
                        new
                        {
                            Id = 247,
                            Alpha2Code = "UZ",
                            Name = "Usbequistão"
                        },
                        new
                        {
                            Id = 248,
                            Alpha2Code = "VU",
                            Name = "Vanuatu"
                        },
                        new
                        {
                            Id = 249,
                            Alpha2Code = "VE",
                            Name = "Venezuela, República Bolivariana da"
                        },
                        new
                        {
                            Id = 250,
                            Alpha2Code = "VN",
                            Name = "Vietname"
                        },
                        new
                        {
                            Id = 251,
                            Alpha2Code = "WF",
                            Name = "Wallis e Futuna (Ilhas)"
                        },
                        new
                        {
                            Id = 252,
                            Alpha2Code = "ZM",
                            Name = "Zâmbia"
                        },
                        new
                        {
                            Id = 253,
                            Alpha2Code = "ZW",
                            Name = "Zimbabwe"
                        });
                });

            modelBuilder.Entity("wlc2.Models.OrganicUnit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExternalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("OrganicUnits");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Abbreviation = "ESGT",
                            ExternalCode = "3241",
                            Name = "Escola Superior de Gestão de Tomar"
                        },
                        new
                        {
                            Id = 2,
                            Abbreviation = "ESTA",
                            ExternalCode = "3243",
                            Name = "Escola Superior de Tecnologia de Abrantes"
                        },
                        new
                        {
                            Id = 3,
                            Abbreviation = "ESTT",
                            ExternalCode = "3242",
                            Name = "Escola Superior de Tecnologia de Tomar"
                        });
                });

            modelBuilder.Entity("wlc2.Models.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdentificationNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IdentificationTypeFK")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NationalityFK")
                        .HasColumnType("int");

                    b.Property<string>("ORCID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IdentificationTypeFK");

                    b.HasIndex("NationalityFK");

                    b.ToTable("Persons");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Person");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("wlc2.Models.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AbstractEN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AbstractPT")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AcademicYearFK")
                        .HasColumnType("int");

                    b.Property<int>("AccessTypeFK")
                        .HasColumnType("int");

                    b.Property<int?>("CourseId")
                        .HasColumnType("int");

                    b.Property<int>("Grade")
                        .HasColumnType("int");

                    b.Property<string>("KeywordsEN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("KeywordsPT")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LanguageFK")
                        .HasColumnType("int");

                    b.Property<int>("LicenseFK")
                        .HasColumnType("int");

                    b.Property<int>("ProjectStatus")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AcademicYearFK");

                    b.HasIndex("AccessTypeFK");

                    b.HasIndex("CourseId");

                    b.HasIndex("LanguageFK");

                    b.HasIndex("LicenseFK");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("wlc2.Models.ProjectDefense", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DefenseDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProjectFK")
                        .HasColumnType("int");

                    b.Property<string>("Room")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProjectFK")
                        .IsUnique();

                    b.ToTable("ProjectDefenses");
                });

            modelBuilder.Entity("wlc2.Models.ProjectValidation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("PersonFK")
                        .HasColumnType("int");

                    b.Property<int>("ProjectFK")
                        .HasColumnType("int");

                    b.Property<bool>("Validated")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ValidationDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("PersonFK");

                    b.HasIndex("ProjectFK");

                    b.ToTable("ProjectsValidations");
                });

            modelBuilder.Entity("wlc2.Models.Proposal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AcademicYearFK")
                        .HasColumnType("int");

                    b.Property<int>("CourseFK")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("InstitutionFK")
                        .HasColumnType("int");

                    b.Property<int>("ProposalStatus")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AcademicYearFK");

                    b.HasIndex("CourseFK");

                    b.HasIndex("InstitutionFK");

                    b.ToTable("Proposals");
                });

            modelBuilder.Entity("wlc2.Models.RepositoryCollection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrganicUnitFK")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrganicUnitFK");

                    b.ToTable("RepositoryCollections");
                });

            modelBuilder.Entity("wlc2.Models.ResearchProject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Reference")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ResearchProjects");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "OMRisk",
                            Reference = "UIDB/05567/2020/04"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Cognition",
                            Reference = "UIDB/05567/2020/01"
                        },
                        new
                        {
                            Id = 3,
                            Name = "MoSBurn",
                            Reference = "UIDB/05567/2020/03"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Solar",
                            Reference = "UIDB/05567/2020/05"
                        },
                        new
                        {
                            Id = 5,
                            Name = "EcoModZHC",
                            Reference = "CENTRO-01-0145-FEDER-179932"
                        },
                        new
                        {
                            Id = 6,
                            Name = "BREUCA",
                            Reference = "POCI-01-0247-FEDER-048257"
                        },
                        new
                        {
                            Id = 7,
                            Name = "CRASH",
                            Reference = "POCI-01-0247-FEDER-070315"
                        },
                        new
                        {
                            Id = 8,
                            Name = "GePISCal",
                            Reference = "UIDB/05567/2020 "
                        },
                        new
                        {
                            Id = 9,
                            Name = "SmarterCW",
                            Reference = "UIDP/05567/2020/03"
                        },
                        new
                        {
                            Id = 10,
                            Name = "SmartBASE",
                            Reference = "UIDB/05567/2020/00"
                        },
                        new
                        {
                            Id = 11,
                            Name = "H2-REnWaste",
                            Reference = "UIDP/05567/2020/01"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Dragonfly",
                            Reference = "UIDP/05567/2020/02"
                        },
                        new
                        {
                            Id = 13,
                            Name = "B-RELIABLE",
                            Reference = "SAICT/30935/2017"
                        },
                        new
                        {
                            Id = 14,
                            Name = "HTPDIR",
                            Reference = "POCI-01-0247-FEDER-017644"
                        },
                        new
                        {
                            Id = 15,
                            Name = "INFANTE",
                            Reference = "CENTRO-01-0246-FEDER-000017"
                        },
                        new
                        {
                            Id = 16,
                            Name = "INDuGRID",
                            Reference = "ERANETLAC/0006/2014"
                        },
                        new
                        {
                            Id = 17,
                            Name = "VITASENIOR-MT",
                            Reference = "CENTRO-01-0145-FEDER-023659"
                        },
                        new
                        {
                            Id = 18,
                            Name = "EXOBIKE",
                            Reference = "CENTRO-01-0145-FEDER-24013"
                        },
                        new
                        {
                            Id = 19,
                            Name = "AGA@4life",
                            Reference = "CENTRO-01-0145-FEDER-023369"
                        },
                        new
                        {
                            Id = 20,
                            Name = "MOVTOUR",
                            Reference = "POCI-01-0145-FEDER-024068"
                        },
                        new
                        {
                            Id = 21,
                            Name = "LIBÉLULA",
                            Reference = "CENTRO-01-0145-FEDER-024052"
                        },
                        new
                        {
                            Id = 22,
                            Name = "MOVIDA",
                            Reference = "CENTRO-01-0145-FEDER-023878"
                        },
                        new
                        {
                            Id = 23,
                            Name = "GEDITEC",
                            Reference = "POCI-01-0145-FEDER-023723"
                        },
                        new
                        {
                            Id = 24,
                            Name = "VALORBIO",
                            Reference = "POCI-01-0145-FEDER-23314"
                        });
                });

            modelBuilder.Entity("wlc2.Models.Advisor", b =>
                {
                    b.HasBaseType("wlc2.Models.Person");

                    b.Property<bool>("External")
                        .HasColumnType("bit");

                    b.Property<bool>("PhD")
                        .HasColumnType("bit");

                    b.Property<bool>("Specialist")
                        .HasColumnType("bit");

                    b.HasDiscriminator().HasValue("Advisor");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "anacris@ipt.pt",
                            IdentificationNumber = "225630605",
                            IdentificationTypeFK = 1,
                            Name = "Ana Cristina Barata Pires Lopes",
                            NationalityFK = 188,
                            UserId = "1",
                            External = false,
                            PhD = false,
                            Specialist = false
                        },
                        new
                        {
                            Id = 2,
                            Email = "cbatista@ipt.pt",
                            IdentificationNumber = "252394020",
                            IdentificationTypeFK = 1,
                            Name = "António Casimiro Teixeira Batista",
                            NationalityFK = 188,
                            UserId = "2",
                            External = true,
                            PhD = false,
                            Specialist = false
                        },
                        new
                        {
                            Id = 3,
                            Email = "manso@ipt.pt",
                            IdentificationNumber = "215755812",
                            IdentificationTypeFK = 1,
                            Name = "António Manuel Rodrigues Manso",
                            NationalityFK = 188,
                            UserId = "3",
                            External = true,
                            PhD = false,
                            Specialist = false
                        },
                        new
                        {
                            Id = 4,
                            Email = "bruno.almeida@ipt.pt",
                            IdentificationNumber = "246221933",
                            IdentificationTypeFK = 1,
                            Name = "Bruno Manuel de Almeida Santos",
                            NationalityFK = 188,
                            UserId = "4",
                            External = false,
                            PhD = false,
                            Specialist = false
                        },
                        new
                        {
                            Id = 5,
                            Email = "carloqrz@ipt.pt",
                            IdentificationNumber = "266415369",
                            IdentificationTypeFK = 1,
                            Name = "Carlos David Magalhães Queiroz",
                            NationalityFK = 188,
                            UserId = "5",
                            External = true,
                            PhD = false,
                            Specialist = false
                        },
                        new
                        {
                            Id = 6,
                            Email = "carlos.perquilhas@ipt.pt",
                            IdentificationNumber = "213937042",
                            IdentificationTypeFK = 1,
                            Name = "Carlos Filipe Perquilhas Baptista",
                            NationalityFK = 188,
                            UserId = "6",
                            External = true,
                            PhD = false,
                            Specialist = false
                        },
                        new
                        {
                            Id = 7,
                            Email = "fnunes@ipt.pt",
                            IdentificationNumber = "233018131",
                            IdentificationTypeFK = 1,
                            Name = "Francisco José Alexandre Nunes",
                            NationalityFK = 188,
                            UserId = "7",
                            External = true,
                            PhD = true,
                            Specialist = false
                        },
                        new
                        {
                            Id = 8,
                            Email = "casimiro@ipt.pt",
                            IdentificationNumber = "248716093",
                            IdentificationTypeFK = 1,
                            Name = "José Casimiro Nunes Pereira",
                            NationalityFK = 188,
                            UserId = "8",
                            External = true,
                            PhD = true,
                            Specialist = false
                        },
                        new
                        {
                            Id = 9,
                            Email = "loliveira@ipt.pt",
                            IdentificationNumber = "223054321",
                            IdentificationTypeFK = 1,
                            Name = "Luís Miguel Lopes de Oliveira",
                            NationalityFK = 188,
                            UserId = "9",
                            External = true,
                            PhD = true,
                            Specialist = false
                        },
                        new
                        {
                            Id = 10,
                            Email = "fmbarros@ipt.pt",
                            IdentificationNumber = "291610072",
                            IdentificationTypeFK = 1,
                            Name = "Manuel Fernando Martins de Barros",
                            NationalityFK = 188,
                            UserId = "10",
                            External = true,
                            PhD = true,
                            Specialist = false
                        },
                        new
                        {
                            Id = 11,
                            Email = "gppires@ipt.pt",
                            IdentificationNumber = "209630108",
                            IdentificationTypeFK = 1,
                            Name = "Gabriel Pereira Pires",
                            NationalityFK = 188,
                            UserId = "11",
                            External = true,
                            PhD = true,
                            Specialist = false
                        },
                        new
                        {
                            Id = 12,
                            Email = "renato.panda@ipt.pt",
                            IdentificationNumber = "266266568",
                            IdentificationTypeFK = 1,
                            Name = "Renato Eduardo Silva Panda",
                            NationalityFK = 188,
                            UserId = "12",
                            External = false,
                            PhD = true,
                            Specialist = false
                        });
                });

            modelBuilder.Entity("wlc2.Models.Student", b =>
                {
                    b.HasBaseType("wlc2.Models.Person");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Sex")
                        .HasColumnType("int");

                    b.Property<string>("StudentId")
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("Student");

                    b.HasData(
                        new
                        {
                            Id = 13,
                            Email = "aluno15501@ipt.pt",
                            IdentificationNumber = "289985692",
                            IdentificationTypeFK = 1,
                            Name = "Joni Correia",
                            NationalityFK = 188,
                            UserId = "13",
                            Address = "R Germana Tânger 75",
                            PostalCode = "2720-428 AMADORA",
                            Sex = 0,
                            StudentId = "15501"
                        },
                        new
                        {
                            Id = 14,
                            Email = "aluno20568@ipt.pt",
                            IdentificationNumber = "202553205",
                            IdentificationTypeFK = 1,
                            Name = "Gonçalo Nunes",
                            NationalityFK = 188,
                            UserId = "14",
                            Address = "R Gago Coutinho 82",
                            PostalCode = "3885-467 ESMORIZ",
                            Sex = 0,
                            StudentId = "20568"
                        },
                        new
                        {
                            Id = 15,
                            Email = "aluno20796@ipt.pt",
                            IdentificationNumber = "213517051",
                            IdentificationTypeFK = 1,
                            Name = "José Fernando Silva",
                            NationalityFK = 188,
                            UserId = "15",
                            Address = "R Figueiras 112",
                            PostalCode = "4515-323 LOMBA",
                            Sex = 0,
                            StudentId = "20796"
                        },
                        new
                        {
                            Id = 16,
                            Email = "aluno21876@ipt.pt",
                            IdentificationNumber = "203512421",
                            IdentificationTypeFK = 1,
                            Name = "João Franscisco",
                            NationalityFK = 188,
                            UserId = "16",
                            Address = "R Irene Lisboa 99",
                            PostalCode = "2680-088 CAMARATE",
                            Sex = 0,
                            StudentId = "21876"
                        },
                        new
                        {
                            Id = 17,
                            Email = "aluno21296@ipt.pt",
                            IdentificationNumber = "296435511",
                            IdentificationTypeFK = 1,
                            Name = "André Duarte de Sá",
                            NationalityFK = 188,
                            UserId = "17",
                            Address = "Travessa Vale da Loura 11",
                            PostalCode = "2260-027 ATALAIA VNB",
                            Sex = 0,
                            StudentId = "21296"
                        });
                });

            modelBuilder.Entity("AcademicYearCourse", b =>
                {
                    b.HasOne("wlc2.Models.AcademicYear", null)
                        .WithMany()
                        .HasForeignKey("AcademicYearsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("wlc2.Models.Course", null)
                        .WithMany()
                        .HasForeignKey("CoursesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AdvisorInstitution", b =>
                {
                    b.HasOne("wlc2.Models.Advisor", null)
                        .WithMany()
                        .HasForeignKey("AdvisorsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("wlc2.Models.Institution", null)
                        .WithMany()
                        .HasForeignKey("InstitutionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AdvisorProject", b =>
                {
                    b.HasOne("wlc2.Models.Advisor", null)
                        .WithMany()
                        .HasForeignKey("AdvisorsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("wlc2.Models.Project", null)
                        .WithMany()
                        .HasForeignKey("SupervisedProjectsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AdvisorProposal", b =>
                {
                    b.HasOne("wlc2.Models.Advisor", null)
                        .WithMany()
                        .HasForeignKey("AdvisorsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("wlc2.Models.Proposal", null)
                        .WithMany()
                        .HasForeignKey("ProposalsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ApplicationStudent", b =>
                {
                    b.HasOne("wlc2.Models.Application", null)
                        .WithMany()
                        .HasForeignKey("ApplicationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("wlc2.Models.Student", null)
                        .WithMany()
                        .HasForeignKey("StudentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProjectRepositoryCollection", b =>
                {
                    b.HasOne("wlc2.Models.Project", null)
                        .WithMany()
                        .HasForeignKey("ProjectsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("wlc2.Models.RepositoryCollection", null)
                        .WithMany()
                        .HasForeignKey("RepositoryCollectionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProjectResearchProject", b =>
                {
                    b.HasOne("wlc2.Models.Project", null)
                        .WithMany()
                        .HasForeignKey("ProjectsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("wlc2.Models.ResearchProject", null)
                        .WithMany()
                        .HasForeignKey("ResearchProjectsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProjectStudent", b =>
                {
                    b.HasOne("wlc2.Models.Project", null)
                        .WithMany()
                        .HasForeignKey("ProjectsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("wlc2.Models.Student", null)
                        .WithMany()
                        .HasForeignKey("StudentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProposalStudent", b =>
                {
                    b.HasOne("wlc2.Models.Proposal", null)
                        .WithMany()
                        .HasForeignKey("AutoProposalsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("wlc2.Models.Student", null)
                        .WithMany()
                        .HasForeignKey("ProponentStudentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("wlc2.Models.Application", b =>
                {
                    b.HasOne("wlc2.Models.AcademicYear", "AcademicYear")
                        .WithMany("Applications")
                        .HasForeignKey("AcademicYearFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AcademicYear");
                });

            modelBuilder.Entity("wlc2.Models.ApplicationProposal", b =>
                {
                    b.HasOne("wlc2.Models.Application", "Aplication")
                        .WithMany("ApplicationProposals")
                        .HasForeignKey("ApplicationFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("wlc2.Models.Proposal", "Proposal")
                        .WithMany("ApplicationProposals")
                        .HasForeignKey("ProposalFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Aplication");

                    b.Navigation("Proposal");
                });

            modelBuilder.Entity("wlc2.Models.Course", b =>
                {
                    b.HasOne("wlc2.Models.Area", "Area")
                        .WithMany("Courses")
                        .HasForeignKey("AreaFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("wlc2.Models.OrganicUnit", "OrganicUnit")
                        .WithMany("Courses")
                        .HasForeignKey("OrganicUnitFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("wlc2.Models.Person", null)
                        .WithMany("Courses")
                        .HasForeignKey("PersonId");

                    b.Navigation("Area");

                    b.Navigation("OrganicUnit");
                });

            modelBuilder.Entity("wlc2.Models.CourseAdvisor", b =>
                {
                    b.HasOne("wlc2.Models.Advisor", "Advisor")
                        .WithMany()
                        .HasForeignKey("AdvisorFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("wlc2.Models.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Advisor");

                    b.Navigation("Course");
                });

            modelBuilder.Entity("wlc2.Models.Enrollment", b =>
                {
                    b.HasOne("wlc2.Models.Course", "Course")
                        .WithMany("Enrollments")
                        .HasForeignKey("CourseFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("wlc2.Models.AcademicYear", "EnrollmentCompleted")
                        .WithMany()
                        .HasForeignKey("EnrollmentCompletedFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("wlc2.Models.AcademicYear", "EnrollmentStarted")
                        .WithMany()
                        .HasForeignKey("EnrollmentStartedFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("wlc2.Models.Student", "Student")
                        .WithMany("Enrollments")
                        .HasForeignKey("StudentFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("EnrollmentCompleted");

                    b.Navigation("EnrollmentStarted");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("wlc2.Models.JuryMember", b =>
                {
                    b.HasOne("wlc2.Models.Advisor", "Advisor")
                        .WithMany("JuryParticipations")
                        .HasForeignKey("AdvisorFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("wlc2.Models.ProjectDefense", "ProjectDefense")
                        .WithMany("JuryMembers")
                        .HasForeignKey("ProjectDefenseFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Advisor");

                    b.Navigation("ProjectDefense");
                });

            modelBuilder.Entity("wlc2.Models.Person", b =>
                {
                    b.HasOne("wlc2.Models.IdentificationType", "IdentificationType")
                        .WithMany("Persons")
                        .HasForeignKey("IdentificationTypeFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("wlc2.Models.Nationality", "Nationality")
                        .WithMany("Persons")
                        .HasForeignKey("NationalityFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IdentificationType");

                    b.Navigation("Nationality");
                });

            modelBuilder.Entity("wlc2.Models.Project", b =>
                {
                    b.HasOne("wlc2.Models.AcademicYear", "AcademicYear")
                        .WithMany("Projects")
                        .HasForeignKey("AcademicYearFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("wlc2.Models.AccessType", "AccessType")
                        .WithMany("Projects")
                        .HasForeignKey("AccessTypeFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("wlc2.Models.Course", null)
                        .WithMany("Projects")
                        .HasForeignKey("CourseId");

                    b.HasOne("wlc2.Models.Language", "Language")
                        .WithMany("Projects")
                        .HasForeignKey("LanguageFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("wlc2.Models.License", "License")
                        .WithMany("Projects")
                        .HasForeignKey("LicenseFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AcademicYear");

                    b.Navigation("AccessType");

                    b.Navigation("Language");

                    b.Navigation("License");
                });

            modelBuilder.Entity("wlc2.Models.ProjectDefense", b =>
                {
                    b.HasOne("wlc2.Models.Project", "Project")
                        .WithOne("ProjectDefense")
                        .HasForeignKey("wlc2.Models.ProjectDefense", "ProjectFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("wlc2.Models.ProjectValidation", b =>
                {
                    b.HasOne("wlc2.Models.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("wlc2.Models.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("wlc2.Models.Proposal", b =>
                {
                    b.HasOne("wlc2.Models.AcademicYear", "AcademicYear")
                        .WithMany("Proposals")
                        .HasForeignKey("AcademicYearFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("wlc2.Models.Course", "Course")
                        .WithMany("Proposals")
                        .HasForeignKey("CourseFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("wlc2.Models.Institution", "Institution")
                        .WithMany()
                        .HasForeignKey("InstitutionFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AcademicYear");

                    b.Navigation("Course");

                    b.Navigation("Institution");
                });

            modelBuilder.Entity("wlc2.Models.RepositoryCollection", b =>
                {
                    b.HasOne("wlc2.Models.OrganicUnit", "OrganicUnit")
                        .WithMany()
                        .HasForeignKey("OrganicUnitFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OrganicUnit");
                });

            modelBuilder.Entity("wlc2.Models.AcademicYear", b =>
                {
                    b.Navigation("Applications");

                    b.Navigation("Projects");

                    b.Navigation("Proposals");
                });

            modelBuilder.Entity("wlc2.Models.AccessType", b =>
                {
                    b.Navigation("Projects");
                });

            modelBuilder.Entity("wlc2.Models.Application", b =>
                {
                    b.Navigation("ApplicationProposals");
                });

            modelBuilder.Entity("wlc2.Models.Area", b =>
                {
                    b.Navigation("Courses");
                });

            modelBuilder.Entity("wlc2.Models.Course", b =>
                {
                    b.Navigation("Enrollments");

                    b.Navigation("Projects");

                    b.Navigation("Proposals");
                });

            modelBuilder.Entity("wlc2.Models.IdentificationType", b =>
                {
                    b.Navigation("Persons");
                });

            modelBuilder.Entity("wlc2.Models.Language", b =>
                {
                    b.Navigation("Projects");
                });

            modelBuilder.Entity("wlc2.Models.License", b =>
                {
                    b.Navigation("Projects");
                });

            modelBuilder.Entity("wlc2.Models.Nationality", b =>
                {
                    b.Navigation("Persons");
                });

            modelBuilder.Entity("wlc2.Models.OrganicUnit", b =>
                {
                    b.Navigation("Courses");
                });

            modelBuilder.Entity("wlc2.Models.Person", b =>
                {
                    b.Navigation("Courses");
                });

            modelBuilder.Entity("wlc2.Models.Project", b =>
                {
                    b.Navigation("ProjectDefense");
                });

            modelBuilder.Entity("wlc2.Models.ProjectDefense", b =>
                {
                    b.Navigation("JuryMembers");
                });

            modelBuilder.Entity("wlc2.Models.Proposal", b =>
                {
                    b.Navigation("ApplicationProposals");
                });

            modelBuilder.Entity("wlc2.Models.Advisor", b =>
                {
                    b.Navigation("JuryParticipations");
                });

            modelBuilder.Entity("wlc2.Models.Student", b =>
                {
                    b.Navigation("Enrollments");
                });
#pragma warning restore 612, 618
        }
    }
}
